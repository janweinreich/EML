from Compiler import ml
#set numerical precision P, here to 42 bits
sfix.set_precision(42, 63)
#precision of output to the terminal
print_float_precision(15)
#KERNEL WIDTH
#number put here as sigma is = 2.0*sigma*sigma from a gaussian KERNEL
#We do this to avoid having to compute this with encryption to avoid numberical errors and save time


sigma = sfix(10952.0) 
ntrain =
ntest =
testid = 

#number of features in the representation vector, here matching dimension of coulomb matrix for QM9 dataset
REPDIM = 351
#TRAINDATA DATA
TRAINDATA = sfix.Matrix(ntrain, REPDIM+1)
TRAINDATA.input_from(0)
#QUERY DATA
TESTDATA = sfix.Matrix(ntest, REPDIM)
TESTDATA.input_from(1)
XTRAIN = sfix.Matrix(ntrain, REPDIM)
XTEST = sfix.Matrix(ntest, REPDIM)
ALPHAS_MAT = sfix.Matrix(1, ntrain)
KERNEL = sfix.Matrix(ntrain, ntest)

#read the weights and training data features from the input file
@for_range(ntrain)
def _(i):
    for j in range(REPDIM):
        XTRAIN[i][j] = TRAINDATA[i][j]
    ALPHAS_MAT[0][i] = TRAINDATA[i][REPDIM]

#read the test data from the second input file
@for_range(ntest)
def _(i):
    for j in range(REPDIM):
        XTEST[i][j] = TESTDATA[i][j]


#Use first entry of XTEST since only a single prediction at a time
#compute the kernel matrix overlap between the test data and the training data
#this is the gaussian kernel function
#distances should not be printed out in a real application

j = 0
@for_range_opt(ntrain)
def _(i):
    NEG_XTEST = XTEST[j].__rmul__(-1)
    DIJ = XTRAIN[i].__radd__(NEG_XTEST)
    DIJ = sfix.dot_product(DIJ, DIJ)
    print_ln('DISTANCE %s', DIJ.reveal())
    KERNEL[i][j] = ml.exp(-DIJ/sigma)


#MAKE PREDICTION
PREDICTED = ALPHAS_MAT.direct_mul(KERNEL)
#prediction should not be printed out in a real application
print_ln('CRYPTO_PRED %s %s %s', ntrain, testid, PREDICTED[0].reveal())