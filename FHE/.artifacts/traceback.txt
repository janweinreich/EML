Traceback (most recent call last):
  File "/home/jan/miniconda3/envs/fhe/lib/python3.8/site-packages/concrete/numpy/compilation/compiler.py", line 436, in compile
    self._evaluate("Compiling", inputset)
  File "/home/jan/miniconda3/envs/fhe/lib/python3.8/site-packages/concrete/numpy/compilation/compiler.py", line 277, in _evaluate
    self._trace(first_sample)
  File "/home/jan/miniconda3/envs/fhe/lib/python3.8/site-packages/concrete/numpy/compilation/compiler.py", line 210, in _trace
    fuse(self.graph, self.artifacts)
  File "/home/jan/miniconda3/envs/fhe/lib/python3.8/site-packages/concrete/numpy/compilation/utils.py", line 58, in fuse
    fused_node, node_before_subgraph = convert_subgraph_to_subgraph_node(
  File "/home/jan/miniconda3/envs/fhe/lib/python3.8/site-packages/concrete/numpy/compilation/utils.py", line 569, in convert_subgraph_to_subgraph_node
    raise RuntimeError(
RuntimeError: A subgraph within the function you are trying to compile cannot be fused because it has multiple input nodes

   %0 = X_train                                 # EncryptedTensor<float64, shape=(10, 30)>
   %1 = alphas                                  # EncryptedTensor<uint1, shape=(10,)>
   %2 = sigma                                   # EncryptedScalar<uint1>
   %3 = X_test                                  # EncryptedTensor<float64, shape=(10, 30)>
   %4 = %0[0]                                   # EncryptedTensor<float64, shape=(30,)>
   %5 = %3[0]                                   # EncryptedTensor<float64, shape=(30,)>
   %6 = subtract(%4, %5)                        # EncryptedTensor<float64, shape=(30,)>
   %7 = %0[0]                                   # EncryptedTensor<float64, shape=(30,)>
   %8 = %3[0]                                   # EncryptedTensor<float64, shape=(30,)>
   %9 = subtract(%7, %8)                        # EncryptedTensor<float64, shape=(30,)>
  %10 = add(%6, %9)                             # EncryptedTensor<float64, shape=(30,)>
  %11 = 2                                       # ClearScalar<uint2>
  %12 = power(%10, %11)                         # EncryptedTensor<float64, shape=(30,)>
  %13 = 4                                       # ClearScalar<uint3>
  %14 = floor_divide(%12, %13)                  # EncryptedTensor<float64, shape=(30,)>
  %15 = astype(%14, dtype=int_)                 # EncryptedTensor<uint1, shape=(30,)>
  %16 = subtract(%6, %9)                        # EncryptedTensor<float64, shape=(30,)>
  %17 = 2                                       # ClearScalar<uint2>
  %18 = power(%16, %17)                         # EncryptedTensor<float64, shape=(30,)>
  %19 = 4                                       # ClearScalar<uint3>
  %20 = floor_divide(%18, %19)                  # EncryptedTensor<float64, shape=(30,)>
  %21 = astype(%20, dtype=int_)                 # EncryptedTensor<uint1, shape=(30,)>
  %22 = subtract(%15, %21)                      # EncryptedTensor<uint1, shape=(30,)>
  %23 = sum(%22)                                # EncryptedScalar<uint5>
  %24 = negative(%23)                           # EncryptedScalar<int1>
  %25 = 2                                       # ClearScalar<uint2>
  %26 = power(%2, %25)                          # EncryptedScalar<uint1>
  %27 = true_divide(%24, %26)                   # EncryptedScalar<float64>
  %28 = exp(%27)                                # EncryptedScalar<float64>
  %29 = %0[0]                                   # EncryptedTensor<float64, shape=(30,)>
  %30 = %3[1]                                   # EncryptedTensor<float64, shape=(30,)>
  %31 = subtract(%29, %30)                      # EncryptedTensor<float64, shape=(30,)>
  %32 = %0[0]                                   # EncryptedTensor<float64, shape=(30,)>
  %33 = %3[1]                                   # EncryptedTensor<float64, shape=(30,)>
  %34 = subtract(%32, %33)                      # EncryptedTensor<float64, shape=(30,)>
  %35 = add(%31, %34)                           # EncryptedTensor<float64, shape=(30,)>
  %36 = 2                                       # ClearScalar<uint2>
  %37 = power(%35, %36)                         # EncryptedTensor<float64, shape=(30,)>
  %38 = 4                                       # ClearScalar<uint3>
  %39 = floor_divide(%37, %38)                  # EncryptedTensor<float64, shape=(30,)>
  %40 = astype(%39, dtype=int_)                 # EncryptedTensor<uint1, shape=(30,)>
  %41 = subtract(%31, %34)                      # EncryptedTensor<float64, shape=(30,)>
  %42 = 2                                       # ClearScalar<uint2>
  %43 = power(%41, %42)                         # EncryptedTensor<float64, shape=(30,)>
  %44 = 4                                       # ClearScalar<uint3>
  %45 = floor_divide(%43, %44)                  # EncryptedTensor<float64, shape=(30,)>
  %46 = astype(%45, dtype=int_)                 # EncryptedTensor<uint1, shape=(30,)>
  %47 = subtract(%40, %46)                      # EncryptedTensor<uint1, shape=(30,)>
  %48 = sum(%47)                                # EncryptedScalar<uint5>
  %49 = negative(%48)                           # EncryptedScalar<int1>
  %50 = 2                                       # ClearScalar<uint2>
  %51 = power(%2, %50)                          # EncryptedScalar<uint1>
  %52 = true_divide(%49, %51)                   # EncryptedScalar<float64>
  %53 = exp(%52)                                # EncryptedScalar<float64>
  %54 = %0[0]                                   # EncryptedTensor<float64, shape=(30,)>
  %55 = %3[2]                                   # EncryptedTensor<float64, shape=(30,)>
  %56 = subtract(%54, %55)                      # EncryptedTensor<float64, shape=(30,)>
  %57 = %0[0]                                   # EncryptedTensor<float64, shape=(30,)>
  %58 = %3[2]                                   # EncryptedTensor<float64, shape=(30,)>
  %59 = subtract(%57, %58)                      # EncryptedTensor<float64, shape=(30,)>
  %60 = add(%56, %59)                           # EncryptedTensor<float64, shape=(30,)>
  %61 = 2                                       # ClearScalar<uint2>
  %62 = power(%60, %61)                         # EncryptedTensor<float64, shape=(30,)>
  %63 = 4                                       # ClearScalar<uint3>
  %64 = floor_divide(%62, %63)                  # EncryptedTensor<float64, shape=(30,)>
  %65 = astype(%64, dtype=int_)                 # EncryptedTensor<uint1, shape=(30,)>
  %66 = subtract(%56, %59)                      # EncryptedTensor<float64, shape=(30,)>
  %67 = 2                                       # ClearScalar<uint2>
  %68 = power(%66, %67)                         # EncryptedTensor<float64, shape=(30,)>
  %69 = 4                                       # ClearScalar<uint3>
  %70 = floor_divide(%68, %69)                  # EncryptedTensor<float64, shape=(30,)>
  %71 = astype(%70, dtype=int_)                 # EncryptedTensor<uint1, shape=(30,)>
  %72 = subtract(%65, %71)                      # EncryptedTensor<uint1, shape=(30,)>
  %73 = sum(%72)                                # EncryptedScalar<uint5>
  %74 = negative(%73)                           # EncryptedScalar<int1>
  %75 = 2                                       # ClearScalar<uint2>
  %76 = power(%2, %75)                          # EncryptedScalar<uint1>
  %77 = true_divide(%74, %76)                   # EncryptedScalar<float64>
  %78 = exp(%77)                                # EncryptedScalar<float64>
  %79 = %0[0]                                   # EncryptedTensor<float64, shape=(30,)>
  %80 = %3[3]                                   # EncryptedTensor<float64, shape=(30,)>
  %81 = subtract(%79, %80)                      # EncryptedTensor<float64, shape=(30,)>
  %82 = %0[0]                                   # EncryptedTensor<float64, shape=(30,)>
  %83 = %3[3]                                   # EncryptedTensor<float64, shape=(30,)>
  %84 = subtract(%82, %83)                      # EncryptedTensor<float64, shape=(30,)>
  %85 = add(%81, %84)                           # EncryptedTensor<float64, shape=(30,)>
  %86 = 2                                       # ClearScalar<uint2>
  %87 = power(%85, %86)                         # EncryptedTensor<float64, shape=(30,)>
  %88 = 4                                       # ClearScalar<uint3>
  %89 = floor_divide(%87, %88)                  # EncryptedTensor<float64, shape=(30,)>
  %90 = astype(%89, dtype=int_)                 # EncryptedTensor<uint1, shape=(30,)>
  %91 = subtract(%81, %84)                      # EncryptedTensor<float64, shape=(30,)>
  %92 = 2                                       # ClearScalar<uint2>
  %93 = power(%91, %92)                         # EncryptedTensor<float64, shape=(30,)>
  %94 = 4                                       # ClearScalar<uint3>
  %95 = floor_divide(%93, %94)                  # EncryptedTensor<float64, shape=(30,)>
  %96 = astype(%95, dtype=int_)                 # EncryptedTensor<uint1, shape=(30,)>
  %97 = subtract(%90, %96)                      # EncryptedTensor<uint1, shape=(30,)>
  %98 = sum(%97)                                # EncryptedScalar<uint5>
  %99 = negative(%98)                           # EncryptedScalar<int1>
 %100 = 2                                       # ClearScalar<uint2>
 %101 = power(%2, %100)                         # EncryptedScalar<uint1>
 %102 = true_divide(%99, %101)                  # EncryptedScalar<float64>
 %103 = exp(%102)                               # EncryptedScalar<float64>
 %104 = %0[0]                                   # EncryptedTensor<float64, shape=(30,)>
 %105 = %3[4]                                   # EncryptedTensor<float64, shape=(30,)>
 %106 = subtract(%104, %105)                    # EncryptedTensor<float64, shape=(30,)>
 %107 = %0[0]                                   # EncryptedTensor<float64, shape=(30,)>
 %108 = %3[4]                                   # EncryptedTensor<float64, shape=(30,)>
 %109 = subtract(%107, %108)                    # EncryptedTensor<float64, shape=(30,)>
 %110 = add(%106, %109)                         # EncryptedTensor<float64, shape=(30,)>
 %111 = 2                                       # ClearScalar<uint2>
 %112 = power(%110, %111)                       # EncryptedTensor<float64, shape=(30,)>
 %113 = 4                                       # ClearScalar<uint3>
 %114 = floor_divide(%112, %113)                # EncryptedTensor<float64, shape=(30,)>
 %115 = astype(%114, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %116 = subtract(%106, %109)                    # EncryptedTensor<float64, shape=(30,)>
 %117 = 2                                       # ClearScalar<uint2>
 %118 = power(%116, %117)                       # EncryptedTensor<float64, shape=(30,)>
 %119 = 4                                       # ClearScalar<uint3>
 %120 = floor_divide(%118, %119)                # EncryptedTensor<float64, shape=(30,)>
 %121 = astype(%120, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %122 = subtract(%115, %121)                    # EncryptedTensor<uint1, shape=(30,)>
 %123 = sum(%122)                               # EncryptedScalar<uint5>
 %124 = negative(%123)                          # EncryptedScalar<int1>
 %125 = 2                                       # ClearScalar<uint2>
 %126 = power(%2, %125)                         # EncryptedScalar<uint1>
 %127 = true_divide(%124, %126)                 # EncryptedScalar<float64>
 %128 = exp(%127)                               # EncryptedScalar<float64>
 %129 = %0[0]                                   # EncryptedTensor<float64, shape=(30,)>
 %130 = %3[5]                                   # EncryptedTensor<float64, shape=(30,)>
 %131 = subtract(%129, %130)                    # EncryptedTensor<float64, shape=(30,)>
 %132 = %0[0]                                   # EncryptedTensor<float64, shape=(30,)>
 %133 = %3[5]                                   # EncryptedTensor<float64, shape=(30,)>
 %134 = subtract(%132, %133)                    # EncryptedTensor<float64, shape=(30,)>
 %135 = add(%131, %134)                         # EncryptedTensor<float64, shape=(30,)>
 %136 = 2                                       # ClearScalar<uint2>
 %137 = power(%135, %136)                       # EncryptedTensor<float64, shape=(30,)>
 %138 = 4                                       # ClearScalar<uint3>
 %139 = floor_divide(%137, %138)                # EncryptedTensor<float64, shape=(30,)>
 %140 = astype(%139, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %141 = subtract(%131, %134)                    # EncryptedTensor<float64, shape=(30,)>
 %142 = 2                                       # ClearScalar<uint2>
 %143 = power(%141, %142)                       # EncryptedTensor<float64, shape=(30,)>
 %144 = 4                                       # ClearScalar<uint3>
 %145 = floor_divide(%143, %144)                # EncryptedTensor<float64, shape=(30,)>
 %146 = astype(%145, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %147 = subtract(%140, %146)                    # EncryptedTensor<uint1, shape=(30,)>
 %148 = sum(%147)                               # EncryptedScalar<uint5>
 %149 = negative(%148)                          # EncryptedScalar<int1>
 %150 = 2                                       # ClearScalar<uint2>
 %151 = power(%2, %150)                         # EncryptedScalar<uint1>
 %152 = true_divide(%149, %151)                 # EncryptedScalar<float64>
 %153 = exp(%152)                               # EncryptedScalar<float64>
 %154 = %0[0]                                   # EncryptedTensor<float64, shape=(30,)>
 %155 = %3[6]                                   # EncryptedTensor<float64, shape=(30,)>
 %156 = subtract(%154, %155)                    # EncryptedTensor<float64, shape=(30,)>
 %157 = %0[0]                                   # EncryptedTensor<float64, shape=(30,)>
 %158 = %3[6]                                   # EncryptedTensor<float64, shape=(30,)>
 %159 = subtract(%157, %158)                    # EncryptedTensor<float64, shape=(30,)>
 %160 = add(%156, %159)                         # EncryptedTensor<float64, shape=(30,)>
 %161 = 2                                       # ClearScalar<uint2>
 %162 = power(%160, %161)                       # EncryptedTensor<float64, shape=(30,)>
 %163 = 4                                       # ClearScalar<uint3>
 %164 = floor_divide(%162, %163)                # EncryptedTensor<float64, shape=(30,)>
 %165 = astype(%164, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %166 = subtract(%156, %159)                    # EncryptedTensor<float64, shape=(30,)>
 %167 = 2                                       # ClearScalar<uint2>
 %168 = power(%166, %167)                       # EncryptedTensor<float64, shape=(30,)>
 %169 = 4                                       # ClearScalar<uint3>
 %170 = floor_divide(%168, %169)                # EncryptedTensor<float64, shape=(30,)>
 %171 = astype(%170, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %172 = subtract(%165, %171)                    # EncryptedTensor<uint1, shape=(30,)>
 %173 = sum(%172)                               # EncryptedScalar<uint5>
 %174 = negative(%173)                          # EncryptedScalar<int1>
 %175 = 2                                       # ClearScalar<uint2>
 %176 = power(%2, %175)                         # EncryptedScalar<uint1>
 %177 = true_divide(%174, %176)                 # EncryptedScalar<float64>
 %178 = exp(%177)                               # EncryptedScalar<float64>
 %179 = %0[0]                                   # EncryptedTensor<float64, shape=(30,)>
 %180 = %3[7]                                   # EncryptedTensor<float64, shape=(30,)>
 %181 = subtract(%179, %180)                    # EncryptedTensor<float64, shape=(30,)>
 %182 = %0[0]                                   # EncryptedTensor<float64, shape=(30,)>
 %183 = %3[7]                                   # EncryptedTensor<float64, shape=(30,)>
 %184 = subtract(%182, %183)                    # EncryptedTensor<float64, shape=(30,)>
 %185 = add(%181, %184)                         # EncryptedTensor<float64, shape=(30,)>
 %186 = 2                                       # ClearScalar<uint2>
 %187 = power(%185, %186)                       # EncryptedTensor<float64, shape=(30,)>
 %188 = 4                                       # ClearScalar<uint3>
 %189 = floor_divide(%187, %188)                # EncryptedTensor<float64, shape=(30,)>
 %190 = astype(%189, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %191 = subtract(%181, %184)                    # EncryptedTensor<float64, shape=(30,)>
 %192 = 2                                       # ClearScalar<uint2>
 %193 = power(%191, %192)                       # EncryptedTensor<float64, shape=(30,)>
 %194 = 4                                       # ClearScalar<uint3>
 %195 = floor_divide(%193, %194)                # EncryptedTensor<float64, shape=(30,)>
 %196 = astype(%195, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %197 = subtract(%190, %196)                    # EncryptedTensor<uint1, shape=(30,)>
 %198 = sum(%197)                               # EncryptedScalar<uint5>
 %199 = negative(%198)                          # EncryptedScalar<int1>
 %200 = 2                                       # ClearScalar<uint2>
 %201 = power(%2, %200)                         # EncryptedScalar<uint1>
 %202 = true_divide(%199, %201)                 # EncryptedScalar<float64>
 %203 = exp(%202)                               # EncryptedScalar<float64>
 %204 = %0[0]                                   # EncryptedTensor<float64, shape=(30,)>
 %205 = %3[8]                                   # EncryptedTensor<float64, shape=(30,)>
 %206 = subtract(%204, %205)                    # EncryptedTensor<float64, shape=(30,)>
 %207 = %0[0]                                   # EncryptedTensor<float64, shape=(30,)>
 %208 = %3[8]                                   # EncryptedTensor<float64, shape=(30,)>
 %209 = subtract(%207, %208)                    # EncryptedTensor<float64, shape=(30,)>
 %210 = add(%206, %209)                         # EncryptedTensor<float64, shape=(30,)>
 %211 = 2                                       # ClearScalar<uint2>
 %212 = power(%210, %211)                       # EncryptedTensor<float64, shape=(30,)>
 %213 = 4                                       # ClearScalar<uint3>
 %214 = floor_divide(%212, %213)                # EncryptedTensor<float64, shape=(30,)>
 %215 = astype(%214, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %216 = subtract(%206, %209)                    # EncryptedTensor<float64, shape=(30,)>
 %217 = 2                                       # ClearScalar<uint2>
 %218 = power(%216, %217)                       # EncryptedTensor<float64, shape=(30,)>
 %219 = 4                                       # ClearScalar<uint3>
 %220 = floor_divide(%218, %219)                # EncryptedTensor<float64, shape=(30,)>
 %221 = astype(%220, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %222 = subtract(%215, %221)                    # EncryptedTensor<uint1, shape=(30,)>
 %223 = sum(%222)                               # EncryptedScalar<uint5>
 %224 = negative(%223)                          # EncryptedScalar<int1>
 %225 = 2                                       # ClearScalar<uint2>
 %226 = power(%2, %225)                         # EncryptedScalar<uint1>
 %227 = true_divide(%224, %226)                 # EncryptedScalar<float64>
 %228 = exp(%227)                               # EncryptedScalar<float64>
 %229 = %0[0]                                   # EncryptedTensor<float64, shape=(30,)>
 %230 = %3[9]                                   # EncryptedTensor<float64, shape=(30,)>
 %231 = subtract(%229, %230)                    # EncryptedTensor<float64, shape=(30,)>
 %232 = %0[0]                                   # EncryptedTensor<float64, shape=(30,)>
 %233 = %3[9]                                   # EncryptedTensor<float64, shape=(30,)>
 %234 = subtract(%232, %233)                    # EncryptedTensor<float64, shape=(30,)>
 %235 = add(%231, %234)                         # EncryptedTensor<float64, shape=(30,)>
 %236 = 2                                       # ClearScalar<uint2>
 %237 = power(%235, %236)                       # EncryptedTensor<float64, shape=(30,)>
 %238 = 4                                       # ClearScalar<uint3>
 %239 = floor_divide(%237, %238)                # EncryptedTensor<float64, shape=(30,)>
 %240 = astype(%239, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %241 = subtract(%231, %234)                    # EncryptedTensor<float64, shape=(30,)>
 %242 = 2                                       # ClearScalar<uint2>
 %243 = power(%241, %242)                       # EncryptedTensor<float64, shape=(30,)>
 %244 = 4                                       # ClearScalar<uint3>
 %245 = floor_divide(%243, %244)                # EncryptedTensor<float64, shape=(30,)>
 %246 = astype(%245, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %247 = subtract(%240, %246)                    # EncryptedTensor<uint1, shape=(30,)>
 %248 = sum(%247)                               # EncryptedScalar<uint5>
 %249 = negative(%248)                          # EncryptedScalar<int1>
 %250 = 2                                       # ClearScalar<uint2>
 %251 = power(%2, %250)                         # EncryptedScalar<uint1>
 %252 = true_divide(%249, %251)                 # EncryptedScalar<float64>
 %253 = exp(%252)                               # EncryptedScalar<float64>
 %254 = %0[1]                                   # EncryptedTensor<float64, shape=(30,)>
 %255 = %3[0]                                   # EncryptedTensor<float64, shape=(30,)>
 %256 = subtract(%254, %255)                    # EncryptedTensor<float64, shape=(30,)>
 %257 = %0[1]                                   # EncryptedTensor<float64, shape=(30,)>
 %258 = %3[0]                                   # EncryptedTensor<float64, shape=(30,)>
 %259 = subtract(%257, %258)                    # EncryptedTensor<float64, shape=(30,)>
 %260 = add(%256, %259)                         # EncryptedTensor<float64, shape=(30,)>
 %261 = 2                                       # ClearScalar<uint2>
 %262 = power(%260, %261)                       # EncryptedTensor<float64, shape=(30,)>
 %263 = 4                                       # ClearScalar<uint3>
 %264 = floor_divide(%262, %263)                # EncryptedTensor<float64, shape=(30,)>
 %265 = astype(%264, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %266 = subtract(%256, %259)                    # EncryptedTensor<float64, shape=(30,)>
 %267 = 2                                       # ClearScalar<uint2>
 %268 = power(%266, %267)                       # EncryptedTensor<float64, shape=(30,)>
 %269 = 4                                       # ClearScalar<uint3>
 %270 = floor_divide(%268, %269)                # EncryptedTensor<float64, shape=(30,)>
 %271 = astype(%270, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %272 = subtract(%265, %271)                    # EncryptedTensor<uint1, shape=(30,)>
 %273 = sum(%272)                               # EncryptedScalar<uint5>
 %274 = negative(%273)                          # EncryptedScalar<int1>
 %275 = 2                                       # ClearScalar<uint2>
 %276 = power(%2, %275)                         # EncryptedScalar<uint1>
 %277 = true_divide(%274, %276)                 # EncryptedScalar<float64>
 %278 = exp(%277)                               # EncryptedScalar<float64>
 %279 = %0[1]                                   # EncryptedTensor<float64, shape=(30,)>
 %280 = %3[1]                                   # EncryptedTensor<float64, shape=(30,)>
 %281 = subtract(%279, %280)                    # EncryptedTensor<float64, shape=(30,)>
 %282 = %0[1]                                   # EncryptedTensor<float64, shape=(30,)>
 %283 = %3[1]                                   # EncryptedTensor<float64, shape=(30,)>
 %284 = subtract(%282, %283)                    # EncryptedTensor<float64, shape=(30,)>
 %285 = add(%281, %284)                         # EncryptedTensor<float64, shape=(30,)>
 %286 = 2                                       # ClearScalar<uint2>
 %287 = power(%285, %286)                       # EncryptedTensor<float64, shape=(30,)>
 %288 = 4                                       # ClearScalar<uint3>
 %289 = floor_divide(%287, %288)                # EncryptedTensor<float64, shape=(30,)>
 %290 = astype(%289, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %291 = subtract(%281, %284)                    # EncryptedTensor<float64, shape=(30,)>
 %292 = 2                                       # ClearScalar<uint2>
 %293 = power(%291, %292)                       # EncryptedTensor<float64, shape=(30,)>
 %294 = 4                                       # ClearScalar<uint3>
 %295 = floor_divide(%293, %294)                # EncryptedTensor<float64, shape=(30,)>
 %296 = astype(%295, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %297 = subtract(%290, %296)                    # EncryptedTensor<uint1, shape=(30,)>
 %298 = sum(%297)                               # EncryptedScalar<uint5>
 %299 = negative(%298)                          # EncryptedScalar<int1>
 %300 = 2                                       # ClearScalar<uint2>
 %301 = power(%2, %300)                         # EncryptedScalar<uint1>
 %302 = true_divide(%299, %301)                 # EncryptedScalar<float64>
 %303 = exp(%302)                               # EncryptedScalar<float64>
 %304 = %0[1]                                   # EncryptedTensor<float64, shape=(30,)>
 %305 = %3[2]                                   # EncryptedTensor<float64, shape=(30,)>
 %306 = subtract(%304, %305)                    # EncryptedTensor<float64, shape=(30,)>
 %307 = %0[1]                                   # EncryptedTensor<float64, shape=(30,)>
 %308 = %3[2]                                   # EncryptedTensor<float64, shape=(30,)>
 %309 = subtract(%307, %308)                    # EncryptedTensor<float64, shape=(30,)>
 %310 = add(%306, %309)                         # EncryptedTensor<float64, shape=(30,)>
 %311 = 2                                       # ClearScalar<uint2>
 %312 = power(%310, %311)                       # EncryptedTensor<float64, shape=(30,)>
 %313 = 4                                       # ClearScalar<uint3>
 %314 = floor_divide(%312, %313)                # EncryptedTensor<float64, shape=(30,)>
 %315 = astype(%314, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %316 = subtract(%306, %309)                    # EncryptedTensor<float64, shape=(30,)>
 %317 = 2                                       # ClearScalar<uint2>
 %318 = power(%316, %317)                       # EncryptedTensor<float64, shape=(30,)>
 %319 = 4                                       # ClearScalar<uint3>
 %320 = floor_divide(%318, %319)                # EncryptedTensor<float64, shape=(30,)>
 %321 = astype(%320, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %322 = subtract(%315, %321)                    # EncryptedTensor<uint1, shape=(30,)>
 %323 = sum(%322)                               # EncryptedScalar<uint5>
 %324 = negative(%323)                          # EncryptedScalar<int1>
 %325 = 2                                       # ClearScalar<uint2>
 %326 = power(%2, %325)                         # EncryptedScalar<uint1>
 %327 = true_divide(%324, %326)                 # EncryptedScalar<float64>
 %328 = exp(%327)                               # EncryptedScalar<float64>
 %329 = %0[1]                                   # EncryptedTensor<float64, shape=(30,)>
 %330 = %3[3]                                   # EncryptedTensor<float64, shape=(30,)>
 %331 = subtract(%329, %330)                    # EncryptedTensor<float64, shape=(30,)>
 %332 = %0[1]                                   # EncryptedTensor<float64, shape=(30,)>
 %333 = %3[3]                                   # EncryptedTensor<float64, shape=(30,)>
 %334 = subtract(%332, %333)                    # EncryptedTensor<float64, shape=(30,)>
 %335 = add(%331, %334)                         # EncryptedTensor<float64, shape=(30,)>
 %336 = 2                                       # ClearScalar<uint2>
 %337 = power(%335, %336)                       # EncryptedTensor<float64, shape=(30,)>
 %338 = 4                                       # ClearScalar<uint3>
 %339 = floor_divide(%337, %338)                # EncryptedTensor<float64, shape=(30,)>
 %340 = astype(%339, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %341 = subtract(%331, %334)                    # EncryptedTensor<float64, shape=(30,)>
 %342 = 2                                       # ClearScalar<uint2>
 %343 = power(%341, %342)                       # EncryptedTensor<float64, shape=(30,)>
 %344 = 4                                       # ClearScalar<uint3>
 %345 = floor_divide(%343, %344)                # EncryptedTensor<float64, shape=(30,)>
 %346 = astype(%345, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %347 = subtract(%340, %346)                    # EncryptedTensor<uint1, shape=(30,)>
 %348 = sum(%347)                               # EncryptedScalar<uint5>
 %349 = negative(%348)                          # EncryptedScalar<int1>
 %350 = 2                                       # ClearScalar<uint2>
 %351 = power(%2, %350)                         # EncryptedScalar<uint1>
 %352 = true_divide(%349, %351)                 # EncryptedScalar<float64>
 %353 = exp(%352)                               # EncryptedScalar<float64>
 %354 = %0[1]                                   # EncryptedTensor<float64, shape=(30,)>
 %355 = %3[4]                                   # EncryptedTensor<float64, shape=(30,)>
 %356 = subtract(%354, %355)                    # EncryptedTensor<float64, shape=(30,)>
 %357 = %0[1]                                   # EncryptedTensor<float64, shape=(30,)>
 %358 = %3[4]                                   # EncryptedTensor<float64, shape=(30,)>
 %359 = subtract(%357, %358)                    # EncryptedTensor<float64, shape=(30,)>
 %360 = add(%356, %359)                         # EncryptedTensor<float64, shape=(30,)>
 %361 = 2                                       # ClearScalar<uint2>
 %362 = power(%360, %361)                       # EncryptedTensor<float64, shape=(30,)>
 %363 = 4                                       # ClearScalar<uint3>
 %364 = floor_divide(%362, %363)                # EncryptedTensor<float64, shape=(30,)>
 %365 = astype(%364, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %366 = subtract(%356, %359)                    # EncryptedTensor<float64, shape=(30,)>
 %367 = 2                                       # ClearScalar<uint2>
 %368 = power(%366, %367)                       # EncryptedTensor<float64, shape=(30,)>
 %369 = 4                                       # ClearScalar<uint3>
 %370 = floor_divide(%368, %369)                # EncryptedTensor<float64, shape=(30,)>
 %371 = astype(%370, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %372 = subtract(%365, %371)                    # EncryptedTensor<uint1, shape=(30,)>
 %373 = sum(%372)                               # EncryptedScalar<uint5>
 %374 = negative(%373)                          # EncryptedScalar<int1>
 %375 = 2                                       # ClearScalar<uint2>
 %376 = power(%2, %375)                         # EncryptedScalar<uint1>
 %377 = true_divide(%374, %376)                 # EncryptedScalar<float64>
 %378 = exp(%377)                               # EncryptedScalar<float64>
 %379 = %0[1]                                   # EncryptedTensor<float64, shape=(30,)>
 %380 = %3[5]                                   # EncryptedTensor<float64, shape=(30,)>
 %381 = subtract(%379, %380)                    # EncryptedTensor<float64, shape=(30,)>
 %382 = %0[1]                                   # EncryptedTensor<float64, shape=(30,)>
 %383 = %3[5]                                   # EncryptedTensor<float64, shape=(30,)>
 %384 = subtract(%382, %383)                    # EncryptedTensor<float64, shape=(30,)>
 %385 = add(%381, %384)                         # EncryptedTensor<float64, shape=(30,)>
 %386 = 2                                       # ClearScalar<uint2>
 %387 = power(%385, %386)                       # EncryptedTensor<float64, shape=(30,)>
 %388 = 4                                       # ClearScalar<uint3>
 %389 = floor_divide(%387, %388)                # EncryptedTensor<float64, shape=(30,)>
 %390 = astype(%389, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %391 = subtract(%381, %384)                    # EncryptedTensor<float64, shape=(30,)>
 %392 = 2                                       # ClearScalar<uint2>
 %393 = power(%391, %392)                       # EncryptedTensor<float64, shape=(30,)>
 %394 = 4                                       # ClearScalar<uint3>
 %395 = floor_divide(%393, %394)                # EncryptedTensor<float64, shape=(30,)>
 %396 = astype(%395, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %397 = subtract(%390, %396)                    # EncryptedTensor<uint1, shape=(30,)>
 %398 = sum(%397)                               # EncryptedScalar<uint5>
 %399 = negative(%398)                          # EncryptedScalar<int1>
 %400 = 2                                       # ClearScalar<uint2>
 %401 = power(%2, %400)                         # EncryptedScalar<uint1>
 %402 = true_divide(%399, %401)                 # EncryptedScalar<float64>
 %403 = exp(%402)                               # EncryptedScalar<float64>
 %404 = %0[1]                                   # EncryptedTensor<float64, shape=(30,)>
 %405 = %3[6]                                   # EncryptedTensor<float64, shape=(30,)>
 %406 = subtract(%404, %405)                    # EncryptedTensor<float64, shape=(30,)>
 %407 = %0[1]                                   # EncryptedTensor<float64, shape=(30,)>
 %408 = %3[6]                                   # EncryptedTensor<float64, shape=(30,)>
 %409 = subtract(%407, %408)                    # EncryptedTensor<float64, shape=(30,)>
 %410 = add(%406, %409)                         # EncryptedTensor<float64, shape=(30,)>
 %411 = 2                                       # ClearScalar<uint2>
 %412 = power(%410, %411)                       # EncryptedTensor<float64, shape=(30,)>
 %413 = 4                                       # ClearScalar<uint3>
 %414 = floor_divide(%412, %413)                # EncryptedTensor<float64, shape=(30,)>
 %415 = astype(%414, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %416 = subtract(%406, %409)                    # EncryptedTensor<float64, shape=(30,)>
 %417 = 2                                       # ClearScalar<uint2>
 %418 = power(%416, %417)                       # EncryptedTensor<float64, shape=(30,)>
 %419 = 4                                       # ClearScalar<uint3>
 %420 = floor_divide(%418, %419)                # EncryptedTensor<float64, shape=(30,)>
 %421 = astype(%420, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %422 = subtract(%415, %421)                    # EncryptedTensor<uint1, shape=(30,)>
 %423 = sum(%422)                               # EncryptedScalar<uint5>
 %424 = negative(%423)                          # EncryptedScalar<int1>
 %425 = 2                                       # ClearScalar<uint2>
 %426 = power(%2, %425)                         # EncryptedScalar<uint1>
 %427 = true_divide(%424, %426)                 # EncryptedScalar<float64>
 %428 = exp(%427)                               # EncryptedScalar<float64>
 %429 = %0[1]                                   # EncryptedTensor<float64, shape=(30,)>
 %430 = %3[7]                                   # EncryptedTensor<float64, shape=(30,)>
 %431 = subtract(%429, %430)                    # EncryptedTensor<float64, shape=(30,)>
 %432 = %0[1]                                   # EncryptedTensor<float64, shape=(30,)>
 %433 = %3[7]                                   # EncryptedTensor<float64, shape=(30,)>
 %434 = subtract(%432, %433)                    # EncryptedTensor<float64, shape=(30,)>
 %435 = add(%431, %434)                         # EncryptedTensor<float64, shape=(30,)>
 %436 = 2                                       # ClearScalar<uint2>
 %437 = power(%435, %436)                       # EncryptedTensor<float64, shape=(30,)>
 %438 = 4                                       # ClearScalar<uint3>
 %439 = floor_divide(%437, %438)                # EncryptedTensor<float64, shape=(30,)>
 %440 = astype(%439, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %441 = subtract(%431, %434)                    # EncryptedTensor<float64, shape=(30,)>
 %442 = 2                                       # ClearScalar<uint2>
 %443 = power(%441, %442)                       # EncryptedTensor<float64, shape=(30,)>
 %444 = 4                                       # ClearScalar<uint3>
 %445 = floor_divide(%443, %444)                # EncryptedTensor<float64, shape=(30,)>
 %446 = astype(%445, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %447 = subtract(%440, %446)                    # EncryptedTensor<uint1, shape=(30,)>
 %448 = sum(%447)                               # EncryptedScalar<uint5>
 %449 = negative(%448)                          # EncryptedScalar<int1>
 %450 = 2                                       # ClearScalar<uint2>
 %451 = power(%2, %450)                         # EncryptedScalar<uint1>
 %452 = true_divide(%449, %451)                 # EncryptedScalar<float64>
 %453 = exp(%452)                               # EncryptedScalar<float64>
 %454 = %0[1]                                   # EncryptedTensor<float64, shape=(30,)>
 %455 = %3[8]                                   # EncryptedTensor<float64, shape=(30,)>
 %456 = subtract(%454, %455)                    # EncryptedTensor<float64, shape=(30,)>
 %457 = %0[1]                                   # EncryptedTensor<float64, shape=(30,)>
 %458 = %3[8]                                   # EncryptedTensor<float64, shape=(30,)>
 %459 = subtract(%457, %458)                    # EncryptedTensor<float64, shape=(30,)>
 %460 = add(%456, %459)                         # EncryptedTensor<float64, shape=(30,)>
 %461 = 2                                       # ClearScalar<uint2>
 %462 = power(%460, %461)                       # EncryptedTensor<float64, shape=(30,)>
 %463 = 4                                       # ClearScalar<uint3>
 %464 = floor_divide(%462, %463)                # EncryptedTensor<float64, shape=(30,)>
 %465 = astype(%464, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %466 = subtract(%456, %459)                    # EncryptedTensor<float64, shape=(30,)>
 %467 = 2                                       # ClearScalar<uint2>
 %468 = power(%466, %467)                       # EncryptedTensor<float64, shape=(30,)>
 %469 = 4                                       # ClearScalar<uint3>
 %470 = floor_divide(%468, %469)                # EncryptedTensor<float64, shape=(30,)>
 %471 = astype(%470, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %472 = subtract(%465, %471)                    # EncryptedTensor<uint1, shape=(30,)>
 %473 = sum(%472)                               # EncryptedScalar<uint5>
 %474 = negative(%473)                          # EncryptedScalar<int1>
 %475 = 2                                       # ClearScalar<uint2>
 %476 = power(%2, %475)                         # EncryptedScalar<uint1>
 %477 = true_divide(%474, %476)                 # EncryptedScalar<float64>
 %478 = exp(%477)                               # EncryptedScalar<float64>
 %479 = %0[1]                                   # EncryptedTensor<float64, shape=(30,)>
 %480 = %3[9]                                   # EncryptedTensor<float64, shape=(30,)>
 %481 = subtract(%479, %480)                    # EncryptedTensor<float64, shape=(30,)>
 %482 = %0[1]                                   # EncryptedTensor<float64, shape=(30,)>
 %483 = %3[9]                                   # EncryptedTensor<float64, shape=(30,)>
 %484 = subtract(%482, %483)                    # EncryptedTensor<float64, shape=(30,)>
 %485 = add(%481, %484)                         # EncryptedTensor<float64, shape=(30,)>
 %486 = 2                                       # ClearScalar<uint2>
 %487 = power(%485, %486)                       # EncryptedTensor<float64, shape=(30,)>
 %488 = 4                                       # ClearScalar<uint3>
 %489 = floor_divide(%487, %488)                # EncryptedTensor<float64, shape=(30,)>
 %490 = astype(%489, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %491 = subtract(%481, %484)                    # EncryptedTensor<float64, shape=(30,)>
 %492 = 2                                       # ClearScalar<uint2>
 %493 = power(%491, %492)                       # EncryptedTensor<float64, shape=(30,)>
 %494 = 4                                       # ClearScalar<uint3>
 %495 = floor_divide(%493, %494)                # EncryptedTensor<float64, shape=(30,)>
 %496 = astype(%495, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %497 = subtract(%490, %496)                    # EncryptedTensor<uint1, shape=(30,)>
 %498 = sum(%497)                               # EncryptedScalar<uint5>
 %499 = negative(%498)                          # EncryptedScalar<int1>
 %500 = 2                                       # ClearScalar<uint2>
 %501 = power(%2, %500)                         # EncryptedScalar<uint1>
 %502 = true_divide(%499, %501)                 # EncryptedScalar<float64>
 %503 = exp(%502)                               # EncryptedScalar<float64>
 %504 = %0[2]                                   # EncryptedTensor<float64, shape=(30,)>
 %505 = %3[0]                                   # EncryptedTensor<float64, shape=(30,)>
 %506 = subtract(%504, %505)                    # EncryptedTensor<float64, shape=(30,)>
 %507 = %0[2]                                   # EncryptedTensor<float64, shape=(30,)>
 %508 = %3[0]                                   # EncryptedTensor<float64, shape=(30,)>
 %509 = subtract(%507, %508)                    # EncryptedTensor<float64, shape=(30,)>
 %510 = add(%506, %509)                         # EncryptedTensor<float64, shape=(30,)>
 %511 = 2                                       # ClearScalar<uint2>
 %512 = power(%510, %511)                       # EncryptedTensor<float64, shape=(30,)>
 %513 = 4                                       # ClearScalar<uint3>
 %514 = floor_divide(%512, %513)                # EncryptedTensor<float64, shape=(30,)>
 %515 = astype(%514, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %516 = subtract(%506, %509)                    # EncryptedTensor<float64, shape=(30,)>
 %517 = 2                                       # ClearScalar<uint2>
 %518 = power(%516, %517)                       # EncryptedTensor<float64, shape=(30,)>
 %519 = 4                                       # ClearScalar<uint3>
 %520 = floor_divide(%518, %519)                # EncryptedTensor<float64, shape=(30,)>
 %521 = astype(%520, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %522 = subtract(%515, %521)                    # EncryptedTensor<uint1, shape=(30,)>
 %523 = sum(%522)                               # EncryptedScalar<uint5>
 %524 = negative(%523)                          # EncryptedScalar<int1>
 %525 = 2                                       # ClearScalar<uint2>
 %526 = power(%2, %525)                         # EncryptedScalar<uint1>
 %527 = true_divide(%524, %526)                 # EncryptedScalar<float64>
 %528 = exp(%527)                               # EncryptedScalar<float64>
 %529 = %0[2]                                   # EncryptedTensor<float64, shape=(30,)>
 %530 = %3[1]                                   # EncryptedTensor<float64, shape=(30,)>
 %531 = subtract(%529, %530)                    # EncryptedTensor<float64, shape=(30,)>
 %532 = %0[2]                                   # EncryptedTensor<float64, shape=(30,)>
 %533 = %3[1]                                   # EncryptedTensor<float64, shape=(30,)>
 %534 = subtract(%532, %533)                    # EncryptedTensor<float64, shape=(30,)>
 %535 = add(%531, %534)                         # EncryptedTensor<float64, shape=(30,)>
 %536 = 2                                       # ClearScalar<uint2>
 %537 = power(%535, %536)                       # EncryptedTensor<float64, shape=(30,)>
 %538 = 4                                       # ClearScalar<uint3>
 %539 = floor_divide(%537, %538)                # EncryptedTensor<float64, shape=(30,)>
 %540 = astype(%539, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %541 = subtract(%531, %534)                    # EncryptedTensor<float64, shape=(30,)>
 %542 = 2                                       # ClearScalar<uint2>
 %543 = power(%541, %542)                       # EncryptedTensor<float64, shape=(30,)>
 %544 = 4                                       # ClearScalar<uint3>
 %545 = floor_divide(%543, %544)                # EncryptedTensor<float64, shape=(30,)>
 %546 = astype(%545, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %547 = subtract(%540, %546)                    # EncryptedTensor<uint1, shape=(30,)>
 %548 = sum(%547)                               # EncryptedScalar<uint5>
 %549 = negative(%548)                          # EncryptedScalar<int1>
 %550 = 2                                       # ClearScalar<uint2>
 %551 = power(%2, %550)                         # EncryptedScalar<uint1>
 %552 = true_divide(%549, %551)                 # EncryptedScalar<float64>
 %553 = exp(%552)                               # EncryptedScalar<float64>
 %554 = %0[2]                                   # EncryptedTensor<float64, shape=(30,)>
 %555 = %3[2]                                   # EncryptedTensor<float64, shape=(30,)>
 %556 = subtract(%554, %555)                    # EncryptedTensor<float64, shape=(30,)>
 %557 = %0[2]                                   # EncryptedTensor<float64, shape=(30,)>
 %558 = %3[2]                                   # EncryptedTensor<float64, shape=(30,)>
 %559 = subtract(%557, %558)                    # EncryptedTensor<float64, shape=(30,)>
 %560 = add(%556, %559)                         # EncryptedTensor<float64, shape=(30,)>
 %561 = 2                                       # ClearScalar<uint2>
 %562 = power(%560, %561)                       # EncryptedTensor<float64, shape=(30,)>
 %563 = 4                                       # ClearScalar<uint3>
 %564 = floor_divide(%562, %563)                # EncryptedTensor<float64, shape=(30,)>
 %565 = astype(%564, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %566 = subtract(%556, %559)                    # EncryptedTensor<float64, shape=(30,)>
 %567 = 2                                       # ClearScalar<uint2>
 %568 = power(%566, %567)                       # EncryptedTensor<float64, shape=(30,)>
 %569 = 4                                       # ClearScalar<uint3>
 %570 = floor_divide(%568, %569)                # EncryptedTensor<float64, shape=(30,)>
 %571 = astype(%570, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %572 = subtract(%565, %571)                    # EncryptedTensor<uint1, shape=(30,)>
 %573 = sum(%572)                               # EncryptedScalar<uint5>
 %574 = negative(%573)                          # EncryptedScalar<int1>
 %575 = 2                                       # ClearScalar<uint2>
 %576 = power(%2, %575)                         # EncryptedScalar<uint1>
 %577 = true_divide(%574, %576)                 # EncryptedScalar<float64>
 %578 = exp(%577)                               # EncryptedScalar<float64>
 %579 = %0[2]                                   # EncryptedTensor<float64, shape=(30,)>
 %580 = %3[3]                                   # EncryptedTensor<float64, shape=(30,)>
 %581 = subtract(%579, %580)                    # EncryptedTensor<float64, shape=(30,)>
 %582 = %0[2]                                   # EncryptedTensor<float64, shape=(30,)>
 %583 = %3[3]                                   # EncryptedTensor<float64, shape=(30,)>
 %584 = subtract(%582, %583)                    # EncryptedTensor<float64, shape=(30,)>
 %585 = add(%581, %584)                         # EncryptedTensor<float64, shape=(30,)>
 %586 = 2                                       # ClearScalar<uint2>
 %587 = power(%585, %586)                       # EncryptedTensor<float64, shape=(30,)>
 %588 = 4                                       # ClearScalar<uint3>
 %589 = floor_divide(%587, %588)                # EncryptedTensor<float64, shape=(30,)>
 %590 = astype(%589, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %591 = subtract(%581, %584)                    # EncryptedTensor<float64, shape=(30,)>
 %592 = 2                                       # ClearScalar<uint2>
 %593 = power(%591, %592)                       # EncryptedTensor<float64, shape=(30,)>
 %594 = 4                                       # ClearScalar<uint3>
 %595 = floor_divide(%593, %594)                # EncryptedTensor<float64, shape=(30,)>
 %596 = astype(%595, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %597 = subtract(%590, %596)                    # EncryptedTensor<uint1, shape=(30,)>
 %598 = sum(%597)                               # EncryptedScalar<uint5>
 %599 = negative(%598)                          # EncryptedScalar<int1>
 %600 = 2                                       # ClearScalar<uint2>
 %601 = power(%2, %600)                         # EncryptedScalar<uint1>
 %602 = true_divide(%599, %601)                 # EncryptedScalar<float64>
 %603 = exp(%602)                               # EncryptedScalar<float64>
 %604 = %0[2]                                   # EncryptedTensor<float64, shape=(30,)>
 %605 = %3[4]                                   # EncryptedTensor<float64, shape=(30,)>
 %606 = subtract(%604, %605)                    # EncryptedTensor<float64, shape=(30,)>
 %607 = %0[2]                                   # EncryptedTensor<float64, shape=(30,)>
 %608 = %3[4]                                   # EncryptedTensor<float64, shape=(30,)>
 %609 = subtract(%607, %608)                    # EncryptedTensor<float64, shape=(30,)>
 %610 = add(%606, %609)                         # EncryptedTensor<float64, shape=(30,)>
 %611 = 2                                       # ClearScalar<uint2>
 %612 = power(%610, %611)                       # EncryptedTensor<float64, shape=(30,)>
 %613 = 4                                       # ClearScalar<uint3>
 %614 = floor_divide(%612, %613)                # EncryptedTensor<float64, shape=(30,)>
 %615 = astype(%614, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %616 = subtract(%606, %609)                    # EncryptedTensor<float64, shape=(30,)>
 %617 = 2                                       # ClearScalar<uint2>
 %618 = power(%616, %617)                       # EncryptedTensor<float64, shape=(30,)>
 %619 = 4                                       # ClearScalar<uint3>
 %620 = floor_divide(%618, %619)                # EncryptedTensor<float64, shape=(30,)>
 %621 = astype(%620, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %622 = subtract(%615, %621)                    # EncryptedTensor<uint1, shape=(30,)>
 %623 = sum(%622)                               # EncryptedScalar<uint5>
 %624 = negative(%623)                          # EncryptedScalar<int1>
 %625 = 2                                       # ClearScalar<uint2>
 %626 = power(%2, %625)                         # EncryptedScalar<uint1>
 %627 = true_divide(%624, %626)                 # EncryptedScalar<float64>
 %628 = exp(%627)                               # EncryptedScalar<float64>
 %629 = %0[2]                                   # EncryptedTensor<float64, shape=(30,)>
 %630 = %3[5]                                   # EncryptedTensor<float64, shape=(30,)>
 %631 = subtract(%629, %630)                    # EncryptedTensor<float64, shape=(30,)>
 %632 = %0[2]                                   # EncryptedTensor<float64, shape=(30,)>
 %633 = %3[5]                                   # EncryptedTensor<float64, shape=(30,)>
 %634 = subtract(%632, %633)                    # EncryptedTensor<float64, shape=(30,)>
 %635 = add(%631, %634)                         # EncryptedTensor<float64, shape=(30,)>
 %636 = 2                                       # ClearScalar<uint2>
 %637 = power(%635, %636)                       # EncryptedTensor<float64, shape=(30,)>
 %638 = 4                                       # ClearScalar<uint3>
 %639 = floor_divide(%637, %638)                # EncryptedTensor<float64, shape=(30,)>
 %640 = astype(%639, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %641 = subtract(%631, %634)                    # EncryptedTensor<float64, shape=(30,)>
 %642 = 2                                       # ClearScalar<uint2>
 %643 = power(%641, %642)                       # EncryptedTensor<float64, shape=(30,)>
 %644 = 4                                       # ClearScalar<uint3>
 %645 = floor_divide(%643, %644)                # EncryptedTensor<float64, shape=(30,)>
 %646 = astype(%645, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %647 = subtract(%640, %646)                    # EncryptedTensor<uint1, shape=(30,)>
 %648 = sum(%647)                               # EncryptedScalar<uint5>
 %649 = negative(%648)                          # EncryptedScalar<int1>
 %650 = 2                                       # ClearScalar<uint2>
 %651 = power(%2, %650)                         # EncryptedScalar<uint1>
 %652 = true_divide(%649, %651)                 # EncryptedScalar<float64>
 %653 = exp(%652)                               # EncryptedScalar<float64>
 %654 = %0[2]                                   # EncryptedTensor<float64, shape=(30,)>
 %655 = %3[6]                                   # EncryptedTensor<float64, shape=(30,)>
 %656 = subtract(%654, %655)                    # EncryptedTensor<float64, shape=(30,)>
 %657 = %0[2]                                   # EncryptedTensor<float64, shape=(30,)>
 %658 = %3[6]                                   # EncryptedTensor<float64, shape=(30,)>
 %659 = subtract(%657, %658)                    # EncryptedTensor<float64, shape=(30,)>
 %660 = add(%656, %659)                         # EncryptedTensor<float64, shape=(30,)>
 %661 = 2                                       # ClearScalar<uint2>
 %662 = power(%660, %661)                       # EncryptedTensor<float64, shape=(30,)>
 %663 = 4                                       # ClearScalar<uint3>
 %664 = floor_divide(%662, %663)                # EncryptedTensor<float64, shape=(30,)>
 %665 = astype(%664, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %666 = subtract(%656, %659)                    # EncryptedTensor<float64, shape=(30,)>
 %667 = 2                                       # ClearScalar<uint2>
 %668 = power(%666, %667)                       # EncryptedTensor<float64, shape=(30,)>
 %669 = 4                                       # ClearScalar<uint3>
 %670 = floor_divide(%668, %669)                # EncryptedTensor<float64, shape=(30,)>
 %671 = astype(%670, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %672 = subtract(%665, %671)                    # EncryptedTensor<uint1, shape=(30,)>
 %673 = sum(%672)                               # EncryptedScalar<uint5>
 %674 = negative(%673)                          # EncryptedScalar<int1>
 %675 = 2                                       # ClearScalar<uint2>
 %676 = power(%2, %675)                         # EncryptedScalar<uint1>
 %677 = true_divide(%674, %676)                 # EncryptedScalar<float64>
 %678 = exp(%677)                               # EncryptedScalar<float64>
 %679 = %0[2]                                   # EncryptedTensor<float64, shape=(30,)>
 %680 = %3[7]                                   # EncryptedTensor<float64, shape=(30,)>
 %681 = subtract(%679, %680)                    # EncryptedTensor<float64, shape=(30,)>
 %682 = %0[2]                                   # EncryptedTensor<float64, shape=(30,)>
 %683 = %3[7]                                   # EncryptedTensor<float64, shape=(30,)>
 %684 = subtract(%682, %683)                    # EncryptedTensor<float64, shape=(30,)>
 %685 = add(%681, %684)                         # EncryptedTensor<float64, shape=(30,)>
 %686 = 2                                       # ClearScalar<uint2>
 %687 = power(%685, %686)                       # EncryptedTensor<float64, shape=(30,)>
 %688 = 4                                       # ClearScalar<uint3>
 %689 = floor_divide(%687, %688)                # EncryptedTensor<float64, shape=(30,)>
 %690 = astype(%689, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %691 = subtract(%681, %684)                    # EncryptedTensor<float64, shape=(30,)>
 %692 = 2                                       # ClearScalar<uint2>
 %693 = power(%691, %692)                       # EncryptedTensor<float64, shape=(30,)>
 %694 = 4                                       # ClearScalar<uint3>
 %695 = floor_divide(%693, %694)                # EncryptedTensor<float64, shape=(30,)>
 %696 = astype(%695, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %697 = subtract(%690, %696)                    # EncryptedTensor<uint1, shape=(30,)>
 %698 = sum(%697)                               # EncryptedScalar<uint5>
 %699 = negative(%698)                          # EncryptedScalar<int1>
 %700 = 2                                       # ClearScalar<uint2>
 %701 = power(%2, %700)                         # EncryptedScalar<uint1>
 %702 = true_divide(%699, %701)                 # EncryptedScalar<float64>
 %703 = exp(%702)                               # EncryptedScalar<float64>
 %704 = %0[2]                                   # EncryptedTensor<float64, shape=(30,)>
 %705 = %3[8]                                   # EncryptedTensor<float64, shape=(30,)>
 %706 = subtract(%704, %705)                    # EncryptedTensor<float64, shape=(30,)>
 %707 = %0[2]                                   # EncryptedTensor<float64, shape=(30,)>
 %708 = %3[8]                                   # EncryptedTensor<float64, shape=(30,)>
 %709 = subtract(%707, %708)                    # EncryptedTensor<float64, shape=(30,)>
 %710 = add(%706, %709)                         # EncryptedTensor<float64, shape=(30,)>
 %711 = 2                                       # ClearScalar<uint2>
 %712 = power(%710, %711)                       # EncryptedTensor<float64, shape=(30,)>
 %713 = 4                                       # ClearScalar<uint3>
 %714 = floor_divide(%712, %713)                # EncryptedTensor<float64, shape=(30,)>
 %715 = astype(%714, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %716 = subtract(%706, %709)                    # EncryptedTensor<float64, shape=(30,)>
 %717 = 2                                       # ClearScalar<uint2>
 %718 = power(%716, %717)                       # EncryptedTensor<float64, shape=(30,)>
 %719 = 4                                       # ClearScalar<uint3>
 %720 = floor_divide(%718, %719)                # EncryptedTensor<float64, shape=(30,)>
 %721 = astype(%720, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %722 = subtract(%715, %721)                    # EncryptedTensor<uint1, shape=(30,)>
 %723 = sum(%722)                               # EncryptedScalar<uint5>
 %724 = negative(%723)                          # EncryptedScalar<int1>
 %725 = 2                                       # ClearScalar<uint2>
 %726 = power(%2, %725)                         # EncryptedScalar<uint1>
 %727 = true_divide(%724, %726)                 # EncryptedScalar<float64>
 %728 = exp(%727)                               # EncryptedScalar<float64>
 %729 = %0[2]                                   # EncryptedTensor<float64, shape=(30,)>
 %730 = %3[9]                                   # EncryptedTensor<float64, shape=(30,)>
 %731 = subtract(%729, %730)                    # EncryptedTensor<float64, shape=(30,)>
 %732 = %0[2]                                   # EncryptedTensor<float64, shape=(30,)>
 %733 = %3[9]                                   # EncryptedTensor<float64, shape=(30,)>
 %734 = subtract(%732, %733)                    # EncryptedTensor<float64, shape=(30,)>
 %735 = add(%731, %734)                         # EncryptedTensor<float64, shape=(30,)>
 %736 = 2                                       # ClearScalar<uint2>
 %737 = power(%735, %736)                       # EncryptedTensor<float64, shape=(30,)>
 %738 = 4                                       # ClearScalar<uint3>
 %739 = floor_divide(%737, %738)                # EncryptedTensor<float64, shape=(30,)>
 %740 = astype(%739, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %741 = subtract(%731, %734)                    # EncryptedTensor<float64, shape=(30,)>
 %742 = 2                                       # ClearScalar<uint2>
 %743 = power(%741, %742)                       # EncryptedTensor<float64, shape=(30,)>
 %744 = 4                                       # ClearScalar<uint3>
 %745 = floor_divide(%743, %744)                # EncryptedTensor<float64, shape=(30,)>
 %746 = astype(%745, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %747 = subtract(%740, %746)                    # EncryptedTensor<uint1, shape=(30,)>
 %748 = sum(%747)                               # EncryptedScalar<uint5>
 %749 = negative(%748)                          # EncryptedScalar<int1>
 %750 = 2                                       # ClearScalar<uint2>
 %751 = power(%2, %750)                         # EncryptedScalar<uint1>
 %752 = true_divide(%749, %751)                 # EncryptedScalar<float64>
 %753 = exp(%752)                               # EncryptedScalar<float64>
 %754 = %0[3]                                   # EncryptedTensor<float64, shape=(30,)>
 %755 = %3[0]                                   # EncryptedTensor<float64, shape=(30,)>
 %756 = subtract(%754, %755)                    # EncryptedTensor<float64, shape=(30,)>
 %757 = %0[3]                                   # EncryptedTensor<float64, shape=(30,)>
 %758 = %3[0]                                   # EncryptedTensor<float64, shape=(30,)>
 %759 = subtract(%757, %758)                    # EncryptedTensor<float64, shape=(30,)>
 %760 = add(%756, %759)                         # EncryptedTensor<float64, shape=(30,)>
 %761 = 2                                       # ClearScalar<uint2>
 %762 = power(%760, %761)                       # EncryptedTensor<float64, shape=(30,)>
 %763 = 4                                       # ClearScalar<uint3>
 %764 = floor_divide(%762, %763)                # EncryptedTensor<float64, shape=(30,)>
 %765 = astype(%764, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %766 = subtract(%756, %759)                    # EncryptedTensor<float64, shape=(30,)>
 %767 = 2                                       # ClearScalar<uint2>
 %768 = power(%766, %767)                       # EncryptedTensor<float64, shape=(30,)>
 %769 = 4                                       # ClearScalar<uint3>
 %770 = floor_divide(%768, %769)                # EncryptedTensor<float64, shape=(30,)>
 %771 = astype(%770, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %772 = subtract(%765, %771)                    # EncryptedTensor<uint1, shape=(30,)>
 %773 = sum(%772)                               # EncryptedScalar<uint5>
 %774 = negative(%773)                          # EncryptedScalar<int1>
 %775 = 2                                       # ClearScalar<uint2>
 %776 = power(%2, %775)                         # EncryptedScalar<uint1>
 %777 = true_divide(%774, %776)                 # EncryptedScalar<float64>
 %778 = exp(%777)                               # EncryptedScalar<float64>
 %779 = %0[3]                                   # EncryptedTensor<float64, shape=(30,)>
 %780 = %3[1]                                   # EncryptedTensor<float64, shape=(30,)>
 %781 = subtract(%779, %780)                    # EncryptedTensor<float64, shape=(30,)>
 %782 = %0[3]                                   # EncryptedTensor<float64, shape=(30,)>
 %783 = %3[1]                                   # EncryptedTensor<float64, shape=(30,)>
 %784 = subtract(%782, %783)                    # EncryptedTensor<float64, shape=(30,)>
 %785 = add(%781, %784)                         # EncryptedTensor<float64, shape=(30,)>
 %786 = 2                                       # ClearScalar<uint2>
 %787 = power(%785, %786)                       # EncryptedTensor<float64, shape=(30,)>
 %788 = 4                                       # ClearScalar<uint3>
 %789 = floor_divide(%787, %788)                # EncryptedTensor<float64, shape=(30,)>
 %790 = astype(%789, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %791 = subtract(%781, %784)                    # EncryptedTensor<float64, shape=(30,)>
 %792 = 2                                       # ClearScalar<uint2>
 %793 = power(%791, %792)                       # EncryptedTensor<float64, shape=(30,)>
 %794 = 4                                       # ClearScalar<uint3>
 %795 = floor_divide(%793, %794)                # EncryptedTensor<float64, shape=(30,)>
 %796 = astype(%795, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %797 = subtract(%790, %796)                    # EncryptedTensor<uint1, shape=(30,)>
 %798 = sum(%797)                               # EncryptedScalar<uint5>
 %799 = negative(%798)                          # EncryptedScalar<int1>
 %800 = 2                                       # ClearScalar<uint2>
 %801 = power(%2, %800)                         # EncryptedScalar<uint1>
 %802 = true_divide(%799, %801)                 # EncryptedScalar<float64>
 %803 = exp(%802)                               # EncryptedScalar<float64>
 %804 = %0[3]                                   # EncryptedTensor<float64, shape=(30,)>
 %805 = %3[2]                                   # EncryptedTensor<float64, shape=(30,)>
 %806 = subtract(%804, %805)                    # EncryptedTensor<float64, shape=(30,)>
 %807 = %0[3]                                   # EncryptedTensor<float64, shape=(30,)>
 %808 = %3[2]                                   # EncryptedTensor<float64, shape=(30,)>
 %809 = subtract(%807, %808)                    # EncryptedTensor<float64, shape=(30,)>
 %810 = add(%806, %809)                         # EncryptedTensor<float64, shape=(30,)>
 %811 = 2                                       # ClearScalar<uint2>
 %812 = power(%810, %811)                       # EncryptedTensor<float64, shape=(30,)>
 %813 = 4                                       # ClearScalar<uint3>
 %814 = floor_divide(%812, %813)                # EncryptedTensor<float64, shape=(30,)>
 %815 = astype(%814, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %816 = subtract(%806, %809)                    # EncryptedTensor<float64, shape=(30,)>
 %817 = 2                                       # ClearScalar<uint2>
 %818 = power(%816, %817)                       # EncryptedTensor<float64, shape=(30,)>
 %819 = 4                                       # ClearScalar<uint3>
 %820 = floor_divide(%818, %819)                # EncryptedTensor<float64, shape=(30,)>
 %821 = astype(%820, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %822 = subtract(%815, %821)                    # EncryptedTensor<uint1, shape=(30,)>
 %823 = sum(%822)                               # EncryptedScalar<uint5>
 %824 = negative(%823)                          # EncryptedScalar<int1>
 %825 = 2                                       # ClearScalar<uint2>
 %826 = power(%2, %825)                         # EncryptedScalar<uint1>
 %827 = true_divide(%824, %826)                 # EncryptedScalar<float64>
 %828 = exp(%827)                               # EncryptedScalar<float64>
 %829 = %0[3]                                   # EncryptedTensor<float64, shape=(30,)>
 %830 = %3[3]                                   # EncryptedTensor<float64, shape=(30,)>
 %831 = subtract(%829, %830)                    # EncryptedTensor<float64, shape=(30,)>
 %832 = %0[3]                                   # EncryptedTensor<float64, shape=(30,)>
 %833 = %3[3]                                   # EncryptedTensor<float64, shape=(30,)>
 %834 = subtract(%832, %833)                    # EncryptedTensor<float64, shape=(30,)>
 %835 = add(%831, %834)                         # EncryptedTensor<float64, shape=(30,)>
 %836 = 2                                       # ClearScalar<uint2>
 %837 = power(%835, %836)                       # EncryptedTensor<float64, shape=(30,)>
 %838 = 4                                       # ClearScalar<uint3>
 %839 = floor_divide(%837, %838)                # EncryptedTensor<float64, shape=(30,)>
 %840 = astype(%839, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %841 = subtract(%831, %834)                    # EncryptedTensor<float64, shape=(30,)>
 %842 = 2                                       # ClearScalar<uint2>
 %843 = power(%841, %842)                       # EncryptedTensor<float64, shape=(30,)>
 %844 = 4                                       # ClearScalar<uint3>
 %845 = floor_divide(%843, %844)                # EncryptedTensor<float64, shape=(30,)>
 %846 = astype(%845, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %847 = subtract(%840, %846)                    # EncryptedTensor<uint1, shape=(30,)>
 %848 = sum(%847)                               # EncryptedScalar<uint5>
 %849 = negative(%848)                          # EncryptedScalar<int1>
 %850 = 2                                       # ClearScalar<uint2>
 %851 = power(%2, %850)                         # EncryptedScalar<uint1>
 %852 = true_divide(%849, %851)                 # EncryptedScalar<float64>
 %853 = exp(%852)                               # EncryptedScalar<float64>
 %854 = %0[3]                                   # EncryptedTensor<float64, shape=(30,)>
 %855 = %3[4]                                   # EncryptedTensor<float64, shape=(30,)>
 %856 = subtract(%854, %855)                    # EncryptedTensor<float64, shape=(30,)>
 %857 = %0[3]                                   # EncryptedTensor<float64, shape=(30,)>
 %858 = %3[4]                                   # EncryptedTensor<float64, shape=(30,)>
 %859 = subtract(%857, %858)                    # EncryptedTensor<float64, shape=(30,)>
 %860 = add(%856, %859)                         # EncryptedTensor<float64, shape=(30,)>
 %861 = 2                                       # ClearScalar<uint2>
 %862 = power(%860, %861)                       # EncryptedTensor<float64, shape=(30,)>
 %863 = 4                                       # ClearScalar<uint3>
 %864 = floor_divide(%862, %863)                # EncryptedTensor<float64, shape=(30,)>
 %865 = astype(%864, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %866 = subtract(%856, %859)                    # EncryptedTensor<float64, shape=(30,)>
 %867 = 2                                       # ClearScalar<uint2>
 %868 = power(%866, %867)                       # EncryptedTensor<float64, shape=(30,)>
 %869 = 4                                       # ClearScalar<uint3>
 %870 = floor_divide(%868, %869)                # EncryptedTensor<float64, shape=(30,)>
 %871 = astype(%870, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %872 = subtract(%865, %871)                    # EncryptedTensor<uint1, shape=(30,)>
 %873 = sum(%872)                               # EncryptedScalar<uint5>
 %874 = negative(%873)                          # EncryptedScalar<int1>
 %875 = 2                                       # ClearScalar<uint2>
 %876 = power(%2, %875)                         # EncryptedScalar<uint1>
 %877 = true_divide(%874, %876)                 # EncryptedScalar<float64>
 %878 = exp(%877)                               # EncryptedScalar<float64>
 %879 = %0[3]                                   # EncryptedTensor<float64, shape=(30,)>
 %880 = %3[5]                                   # EncryptedTensor<float64, shape=(30,)>
 %881 = subtract(%879, %880)                    # EncryptedTensor<float64, shape=(30,)>
 %882 = %0[3]                                   # EncryptedTensor<float64, shape=(30,)>
 %883 = %3[5]                                   # EncryptedTensor<float64, shape=(30,)>
 %884 = subtract(%882, %883)                    # EncryptedTensor<float64, shape=(30,)>
 %885 = add(%881, %884)                         # EncryptedTensor<float64, shape=(30,)>
 %886 = 2                                       # ClearScalar<uint2>
 %887 = power(%885, %886)                       # EncryptedTensor<float64, shape=(30,)>
 %888 = 4                                       # ClearScalar<uint3>
 %889 = floor_divide(%887, %888)                # EncryptedTensor<float64, shape=(30,)>
 %890 = astype(%889, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %891 = subtract(%881, %884)                    # EncryptedTensor<float64, shape=(30,)>
 %892 = 2                                       # ClearScalar<uint2>
 %893 = power(%891, %892)                       # EncryptedTensor<float64, shape=(30,)>
 %894 = 4                                       # ClearScalar<uint3>
 %895 = floor_divide(%893, %894)                # EncryptedTensor<float64, shape=(30,)>
 %896 = astype(%895, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %897 = subtract(%890, %896)                    # EncryptedTensor<uint1, shape=(30,)>
 %898 = sum(%897)                               # EncryptedScalar<uint5>
 %899 = negative(%898)                          # EncryptedScalar<int1>
 %900 = 2                                       # ClearScalar<uint2>
 %901 = power(%2, %900)                         # EncryptedScalar<uint1>
 %902 = true_divide(%899, %901)                 # EncryptedScalar<float64>
 %903 = exp(%902)                               # EncryptedScalar<float64>
 %904 = %0[3]                                   # EncryptedTensor<float64, shape=(30,)>
 %905 = %3[6]                                   # EncryptedTensor<float64, shape=(30,)>
 %906 = subtract(%904, %905)                    # EncryptedTensor<float64, shape=(30,)>
 %907 = %0[3]                                   # EncryptedTensor<float64, shape=(30,)>
 %908 = %3[6]                                   # EncryptedTensor<float64, shape=(30,)>
 %909 = subtract(%907, %908)                    # EncryptedTensor<float64, shape=(30,)>
 %910 = add(%906, %909)                         # EncryptedTensor<float64, shape=(30,)>
 %911 = 2                                       # ClearScalar<uint2>
 %912 = power(%910, %911)                       # EncryptedTensor<float64, shape=(30,)>
 %913 = 4                                       # ClearScalar<uint3>
 %914 = floor_divide(%912, %913)                # EncryptedTensor<float64, shape=(30,)>
 %915 = astype(%914, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %916 = subtract(%906, %909)                    # EncryptedTensor<float64, shape=(30,)>
 %917 = 2                                       # ClearScalar<uint2>
 %918 = power(%916, %917)                       # EncryptedTensor<float64, shape=(30,)>
 %919 = 4                                       # ClearScalar<uint3>
 %920 = floor_divide(%918, %919)                # EncryptedTensor<float64, shape=(30,)>
 %921 = astype(%920, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %922 = subtract(%915, %921)                    # EncryptedTensor<uint1, shape=(30,)>
 %923 = sum(%922)                               # EncryptedScalar<uint5>
 %924 = negative(%923)                          # EncryptedScalar<int1>
 %925 = 2                                       # ClearScalar<uint2>
 %926 = power(%2, %925)                         # EncryptedScalar<uint1>
 %927 = true_divide(%924, %926)                 # EncryptedScalar<float64>
 %928 = exp(%927)                               # EncryptedScalar<float64>
 %929 = %0[3]                                   # EncryptedTensor<float64, shape=(30,)>
 %930 = %3[7]                                   # EncryptedTensor<float64, shape=(30,)>
 %931 = subtract(%929, %930)                    # EncryptedTensor<float64, shape=(30,)>
 %932 = %0[3]                                   # EncryptedTensor<float64, shape=(30,)>
 %933 = %3[7]                                   # EncryptedTensor<float64, shape=(30,)>
 %934 = subtract(%932, %933)                    # EncryptedTensor<float64, shape=(30,)>
 %935 = add(%931, %934)                         # EncryptedTensor<float64, shape=(30,)>
 %936 = 2                                       # ClearScalar<uint2>
 %937 = power(%935, %936)                       # EncryptedTensor<float64, shape=(30,)>
 %938 = 4                                       # ClearScalar<uint3>
 %939 = floor_divide(%937, %938)                # EncryptedTensor<float64, shape=(30,)>
 %940 = astype(%939, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %941 = subtract(%931, %934)                    # EncryptedTensor<float64, shape=(30,)>
 %942 = 2                                       # ClearScalar<uint2>
 %943 = power(%941, %942)                       # EncryptedTensor<float64, shape=(30,)>
 %944 = 4                                       # ClearScalar<uint3>
 %945 = floor_divide(%943, %944)                # EncryptedTensor<float64, shape=(30,)>
 %946 = astype(%945, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %947 = subtract(%940, %946)                    # EncryptedTensor<uint1, shape=(30,)>
 %948 = sum(%947)                               # EncryptedScalar<uint5>
 %949 = negative(%948)                          # EncryptedScalar<int1>
 %950 = 2                                       # ClearScalar<uint2>
 %951 = power(%2, %950)                         # EncryptedScalar<uint1>
 %952 = true_divide(%949, %951)                 # EncryptedScalar<float64>
 %953 = exp(%952)                               # EncryptedScalar<float64>
 %954 = %0[3]                                   # EncryptedTensor<float64, shape=(30,)>
 %955 = %3[8]                                   # EncryptedTensor<float64, shape=(30,)>
 %956 = subtract(%954, %955)                    # EncryptedTensor<float64, shape=(30,)>
 %957 = %0[3]                                   # EncryptedTensor<float64, shape=(30,)>
 %958 = %3[8]                                   # EncryptedTensor<float64, shape=(30,)>
 %959 = subtract(%957, %958)                    # EncryptedTensor<float64, shape=(30,)>
 %960 = add(%956, %959)                         # EncryptedTensor<float64, shape=(30,)>
 %961 = 2                                       # ClearScalar<uint2>
 %962 = power(%960, %961)                       # EncryptedTensor<float64, shape=(30,)>
 %963 = 4                                       # ClearScalar<uint3>
 %964 = floor_divide(%962, %963)                # EncryptedTensor<float64, shape=(30,)>
 %965 = astype(%964, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %966 = subtract(%956, %959)                    # EncryptedTensor<float64, shape=(30,)>
 %967 = 2                                       # ClearScalar<uint2>
 %968 = power(%966, %967)                       # EncryptedTensor<float64, shape=(30,)>
 %969 = 4                                       # ClearScalar<uint3>
 %970 = floor_divide(%968, %969)                # EncryptedTensor<float64, shape=(30,)>
 %971 = astype(%970, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %972 = subtract(%965, %971)                    # EncryptedTensor<uint1, shape=(30,)>
 %973 = sum(%972)                               # EncryptedScalar<uint5>
 %974 = negative(%973)                          # EncryptedScalar<int1>
 %975 = 2                                       # ClearScalar<uint2>
 %976 = power(%2, %975)                         # EncryptedScalar<uint1>
 %977 = true_divide(%974, %976)                 # EncryptedScalar<float64>
 %978 = exp(%977)                               # EncryptedScalar<float64>
 %979 = %0[3]                                   # EncryptedTensor<float64, shape=(30,)>
 %980 = %3[9]                                   # EncryptedTensor<float64, shape=(30,)>
 %981 = subtract(%979, %980)                    # EncryptedTensor<float64, shape=(30,)>
 %982 = %0[3]                                   # EncryptedTensor<float64, shape=(30,)>
 %983 = %3[9]                                   # EncryptedTensor<float64, shape=(30,)>
 %984 = subtract(%982, %983)                    # EncryptedTensor<float64, shape=(30,)>
 %985 = add(%981, %984)                         # EncryptedTensor<float64, shape=(30,)>
 %986 = 2                                       # ClearScalar<uint2>
 %987 = power(%985, %986)                       # EncryptedTensor<float64, shape=(30,)>
 %988 = 4                                       # ClearScalar<uint3>
 %989 = floor_divide(%987, %988)                # EncryptedTensor<float64, shape=(30,)>
 %990 = astype(%989, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %991 = subtract(%981, %984)                    # EncryptedTensor<float64, shape=(30,)>
 %992 = 2                                       # ClearScalar<uint2>
 %993 = power(%991, %992)                       # EncryptedTensor<float64, shape=(30,)>
 %994 = 4                                       # ClearScalar<uint3>
 %995 = floor_divide(%993, %994)                # EncryptedTensor<float64, shape=(30,)>
 %996 = astype(%995, dtype=int_)                # EncryptedTensor<uint1, shape=(30,)>
 %997 = subtract(%990, %996)                    # EncryptedTensor<uint1, shape=(30,)>
 %998 = sum(%997)                               # EncryptedScalar<uint5>
 %999 = negative(%998)                          # EncryptedScalar<int1>
%1000 = 2                                       # ClearScalar<uint2>
%1001 = power(%2, %1000)                        # EncryptedScalar<uint1>
%1002 = true_divide(%999, %1001)                # EncryptedScalar<float64>
%1003 = exp(%1002)                              # EncryptedScalar<float64>
%1004 = %0[4]                                   # EncryptedTensor<float64, shape=(30,)>
%1005 = %3[0]                                   # EncryptedTensor<float64, shape=(30,)>
%1006 = subtract(%1004, %1005)                  # EncryptedTensor<float64, shape=(30,)>
%1007 = %0[4]                                   # EncryptedTensor<float64, shape=(30,)>
%1008 = %3[0]                                   # EncryptedTensor<float64, shape=(30,)>
%1009 = subtract(%1007, %1008)                  # EncryptedTensor<float64, shape=(30,)>
%1010 = add(%1006, %1009)                       # EncryptedTensor<float64, shape=(30,)>
%1011 = 2                                       # ClearScalar<uint2>
%1012 = power(%1010, %1011)                     # EncryptedTensor<float64, shape=(30,)>
%1013 = 4                                       # ClearScalar<uint3>
%1014 = floor_divide(%1012, %1013)              # EncryptedTensor<float64, shape=(30,)>
%1015 = astype(%1014, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1016 = subtract(%1006, %1009)                  # EncryptedTensor<float64, shape=(30,)>
%1017 = 2                                       # ClearScalar<uint2>
%1018 = power(%1016, %1017)                     # EncryptedTensor<float64, shape=(30,)>
%1019 = 4                                       # ClearScalar<uint3>
%1020 = floor_divide(%1018, %1019)              # EncryptedTensor<float64, shape=(30,)>
%1021 = astype(%1020, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1022 = subtract(%1015, %1021)                  # EncryptedTensor<uint1, shape=(30,)>
%1023 = sum(%1022)                              # EncryptedScalar<uint5>
%1024 = negative(%1023)                         # EncryptedScalar<int1>
%1025 = 2                                       # ClearScalar<uint2>
%1026 = power(%2, %1025)                        # EncryptedScalar<uint1>
%1027 = true_divide(%1024, %1026)               # EncryptedScalar<float64>
%1028 = exp(%1027)                              # EncryptedScalar<float64>
%1029 = %0[4]                                   # EncryptedTensor<float64, shape=(30,)>
%1030 = %3[1]                                   # EncryptedTensor<float64, shape=(30,)>
%1031 = subtract(%1029, %1030)                  # EncryptedTensor<float64, shape=(30,)>
%1032 = %0[4]                                   # EncryptedTensor<float64, shape=(30,)>
%1033 = %3[1]                                   # EncryptedTensor<float64, shape=(30,)>
%1034 = subtract(%1032, %1033)                  # EncryptedTensor<float64, shape=(30,)>
%1035 = add(%1031, %1034)                       # EncryptedTensor<float64, shape=(30,)>
%1036 = 2                                       # ClearScalar<uint2>
%1037 = power(%1035, %1036)                     # EncryptedTensor<float64, shape=(30,)>
%1038 = 4                                       # ClearScalar<uint3>
%1039 = floor_divide(%1037, %1038)              # EncryptedTensor<float64, shape=(30,)>
%1040 = astype(%1039, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1041 = subtract(%1031, %1034)                  # EncryptedTensor<float64, shape=(30,)>
%1042 = 2                                       # ClearScalar<uint2>
%1043 = power(%1041, %1042)                     # EncryptedTensor<float64, shape=(30,)>
%1044 = 4                                       # ClearScalar<uint3>
%1045 = floor_divide(%1043, %1044)              # EncryptedTensor<float64, shape=(30,)>
%1046 = astype(%1045, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1047 = subtract(%1040, %1046)                  # EncryptedTensor<uint1, shape=(30,)>
%1048 = sum(%1047)                              # EncryptedScalar<uint5>
%1049 = negative(%1048)                         # EncryptedScalar<int1>
%1050 = 2                                       # ClearScalar<uint2>
%1051 = power(%2, %1050)                        # EncryptedScalar<uint1>
%1052 = true_divide(%1049, %1051)               # EncryptedScalar<float64>
%1053 = exp(%1052)                              # EncryptedScalar<float64>
%1054 = %0[4]                                   # EncryptedTensor<float64, shape=(30,)>
%1055 = %3[2]                                   # EncryptedTensor<float64, shape=(30,)>
%1056 = subtract(%1054, %1055)                  # EncryptedTensor<float64, shape=(30,)>
%1057 = %0[4]                                   # EncryptedTensor<float64, shape=(30,)>
%1058 = %3[2]                                   # EncryptedTensor<float64, shape=(30,)>
%1059 = subtract(%1057, %1058)                  # EncryptedTensor<float64, shape=(30,)>
%1060 = add(%1056, %1059)                       # EncryptedTensor<float64, shape=(30,)>
%1061 = 2                                       # ClearScalar<uint2>
%1062 = power(%1060, %1061)                     # EncryptedTensor<float64, shape=(30,)>
%1063 = 4                                       # ClearScalar<uint3>
%1064 = floor_divide(%1062, %1063)              # EncryptedTensor<float64, shape=(30,)>
%1065 = astype(%1064, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1066 = subtract(%1056, %1059)                  # EncryptedTensor<float64, shape=(30,)>
%1067 = 2                                       # ClearScalar<uint2>
%1068 = power(%1066, %1067)                     # EncryptedTensor<float64, shape=(30,)>
%1069 = 4                                       # ClearScalar<uint3>
%1070 = floor_divide(%1068, %1069)              # EncryptedTensor<float64, shape=(30,)>
%1071 = astype(%1070, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1072 = subtract(%1065, %1071)                  # EncryptedTensor<uint1, shape=(30,)>
%1073 = sum(%1072)                              # EncryptedScalar<uint5>
%1074 = negative(%1073)                         # EncryptedScalar<int1>
%1075 = 2                                       # ClearScalar<uint2>
%1076 = power(%2, %1075)                        # EncryptedScalar<uint1>
%1077 = true_divide(%1074, %1076)               # EncryptedScalar<float64>
%1078 = exp(%1077)                              # EncryptedScalar<float64>
%1079 = %0[4]                                   # EncryptedTensor<float64, shape=(30,)>
%1080 = %3[3]                                   # EncryptedTensor<float64, shape=(30,)>
%1081 = subtract(%1079, %1080)                  # EncryptedTensor<float64, shape=(30,)>
%1082 = %0[4]                                   # EncryptedTensor<float64, shape=(30,)>
%1083 = %3[3]                                   # EncryptedTensor<float64, shape=(30,)>
%1084 = subtract(%1082, %1083)                  # EncryptedTensor<float64, shape=(30,)>
%1085 = add(%1081, %1084)                       # EncryptedTensor<float64, shape=(30,)>
%1086 = 2                                       # ClearScalar<uint2>
%1087 = power(%1085, %1086)                     # EncryptedTensor<float64, shape=(30,)>
%1088 = 4                                       # ClearScalar<uint3>
%1089 = floor_divide(%1087, %1088)              # EncryptedTensor<float64, shape=(30,)>
%1090 = astype(%1089, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1091 = subtract(%1081, %1084)                  # EncryptedTensor<float64, shape=(30,)>
%1092 = 2                                       # ClearScalar<uint2>
%1093 = power(%1091, %1092)                     # EncryptedTensor<float64, shape=(30,)>
%1094 = 4                                       # ClearScalar<uint3>
%1095 = floor_divide(%1093, %1094)              # EncryptedTensor<float64, shape=(30,)>
%1096 = astype(%1095, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1097 = subtract(%1090, %1096)                  # EncryptedTensor<uint1, shape=(30,)>
%1098 = sum(%1097)                              # EncryptedScalar<uint5>
%1099 = negative(%1098)                         # EncryptedScalar<int1>
%1100 = 2                                       # ClearScalar<uint2>
%1101 = power(%2, %1100)                        # EncryptedScalar<uint1>
%1102 = true_divide(%1099, %1101)               # EncryptedScalar<float64>
%1103 = exp(%1102)                              # EncryptedScalar<float64>
%1104 = %0[4]                                   # EncryptedTensor<float64, shape=(30,)>
%1105 = %3[4]                                   # EncryptedTensor<float64, shape=(30,)>
%1106 = subtract(%1104, %1105)                  # EncryptedTensor<float64, shape=(30,)>
%1107 = %0[4]                                   # EncryptedTensor<float64, shape=(30,)>
%1108 = %3[4]                                   # EncryptedTensor<float64, shape=(30,)>
%1109 = subtract(%1107, %1108)                  # EncryptedTensor<float64, shape=(30,)>
%1110 = add(%1106, %1109)                       # EncryptedTensor<float64, shape=(30,)>
%1111 = 2                                       # ClearScalar<uint2>
%1112 = power(%1110, %1111)                     # EncryptedTensor<float64, shape=(30,)>
%1113 = 4                                       # ClearScalar<uint3>
%1114 = floor_divide(%1112, %1113)              # EncryptedTensor<float64, shape=(30,)>
%1115 = astype(%1114, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1116 = subtract(%1106, %1109)                  # EncryptedTensor<float64, shape=(30,)>
%1117 = 2                                       # ClearScalar<uint2>
%1118 = power(%1116, %1117)                     # EncryptedTensor<float64, shape=(30,)>
%1119 = 4                                       # ClearScalar<uint3>
%1120 = floor_divide(%1118, %1119)              # EncryptedTensor<float64, shape=(30,)>
%1121 = astype(%1120, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1122 = subtract(%1115, %1121)                  # EncryptedTensor<uint1, shape=(30,)>
%1123 = sum(%1122)                              # EncryptedScalar<uint5>
%1124 = negative(%1123)                         # EncryptedScalar<int1>
%1125 = 2                                       # ClearScalar<uint2>
%1126 = power(%2, %1125)                        # EncryptedScalar<uint1>
%1127 = true_divide(%1124, %1126)               # EncryptedScalar<float64>
%1128 = exp(%1127)                              # EncryptedScalar<float64>
%1129 = %0[4]                                   # EncryptedTensor<float64, shape=(30,)>
%1130 = %3[5]                                   # EncryptedTensor<float64, shape=(30,)>
%1131 = subtract(%1129, %1130)                  # EncryptedTensor<float64, shape=(30,)>
%1132 = %0[4]                                   # EncryptedTensor<float64, shape=(30,)>
%1133 = %3[5]                                   # EncryptedTensor<float64, shape=(30,)>
%1134 = subtract(%1132, %1133)                  # EncryptedTensor<float64, shape=(30,)>
%1135 = add(%1131, %1134)                       # EncryptedTensor<float64, shape=(30,)>
%1136 = 2                                       # ClearScalar<uint2>
%1137 = power(%1135, %1136)                     # EncryptedTensor<float64, shape=(30,)>
%1138 = 4                                       # ClearScalar<uint3>
%1139 = floor_divide(%1137, %1138)              # EncryptedTensor<float64, shape=(30,)>
%1140 = astype(%1139, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1141 = subtract(%1131, %1134)                  # EncryptedTensor<float64, shape=(30,)>
%1142 = 2                                       # ClearScalar<uint2>
%1143 = power(%1141, %1142)                     # EncryptedTensor<float64, shape=(30,)>
%1144 = 4                                       # ClearScalar<uint3>
%1145 = floor_divide(%1143, %1144)              # EncryptedTensor<float64, shape=(30,)>
%1146 = astype(%1145, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1147 = subtract(%1140, %1146)                  # EncryptedTensor<uint1, shape=(30,)>
%1148 = sum(%1147)                              # EncryptedScalar<uint5>
%1149 = negative(%1148)                         # EncryptedScalar<int1>
%1150 = 2                                       # ClearScalar<uint2>
%1151 = power(%2, %1150)                        # EncryptedScalar<uint1>
%1152 = true_divide(%1149, %1151)               # EncryptedScalar<float64>
%1153 = exp(%1152)                              # EncryptedScalar<float64>
%1154 = %0[4]                                   # EncryptedTensor<float64, shape=(30,)>
%1155 = %3[6]                                   # EncryptedTensor<float64, shape=(30,)>
%1156 = subtract(%1154, %1155)                  # EncryptedTensor<float64, shape=(30,)>
%1157 = %0[4]                                   # EncryptedTensor<float64, shape=(30,)>
%1158 = %3[6]                                   # EncryptedTensor<float64, shape=(30,)>
%1159 = subtract(%1157, %1158)                  # EncryptedTensor<float64, shape=(30,)>
%1160 = add(%1156, %1159)                       # EncryptedTensor<float64, shape=(30,)>
%1161 = 2                                       # ClearScalar<uint2>
%1162 = power(%1160, %1161)                     # EncryptedTensor<float64, shape=(30,)>
%1163 = 4                                       # ClearScalar<uint3>
%1164 = floor_divide(%1162, %1163)              # EncryptedTensor<float64, shape=(30,)>
%1165 = astype(%1164, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1166 = subtract(%1156, %1159)                  # EncryptedTensor<float64, shape=(30,)>
%1167 = 2                                       # ClearScalar<uint2>
%1168 = power(%1166, %1167)                     # EncryptedTensor<float64, shape=(30,)>
%1169 = 4                                       # ClearScalar<uint3>
%1170 = floor_divide(%1168, %1169)              # EncryptedTensor<float64, shape=(30,)>
%1171 = astype(%1170, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1172 = subtract(%1165, %1171)                  # EncryptedTensor<uint1, shape=(30,)>
%1173 = sum(%1172)                              # EncryptedScalar<uint5>
%1174 = negative(%1173)                         # EncryptedScalar<int1>
%1175 = 2                                       # ClearScalar<uint2>
%1176 = power(%2, %1175)                        # EncryptedScalar<uint1>
%1177 = true_divide(%1174, %1176)               # EncryptedScalar<float64>
%1178 = exp(%1177)                              # EncryptedScalar<float64>
%1179 = %0[4]                                   # EncryptedTensor<float64, shape=(30,)>
%1180 = %3[7]                                   # EncryptedTensor<float64, shape=(30,)>
%1181 = subtract(%1179, %1180)                  # EncryptedTensor<float64, shape=(30,)>
%1182 = %0[4]                                   # EncryptedTensor<float64, shape=(30,)>
%1183 = %3[7]                                   # EncryptedTensor<float64, shape=(30,)>
%1184 = subtract(%1182, %1183)                  # EncryptedTensor<float64, shape=(30,)>
%1185 = add(%1181, %1184)                       # EncryptedTensor<float64, shape=(30,)>
%1186 = 2                                       # ClearScalar<uint2>
%1187 = power(%1185, %1186)                     # EncryptedTensor<float64, shape=(30,)>
%1188 = 4                                       # ClearScalar<uint3>
%1189 = floor_divide(%1187, %1188)              # EncryptedTensor<float64, shape=(30,)>
%1190 = astype(%1189, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1191 = subtract(%1181, %1184)                  # EncryptedTensor<float64, shape=(30,)>
%1192 = 2                                       # ClearScalar<uint2>
%1193 = power(%1191, %1192)                     # EncryptedTensor<float64, shape=(30,)>
%1194 = 4                                       # ClearScalar<uint3>
%1195 = floor_divide(%1193, %1194)              # EncryptedTensor<float64, shape=(30,)>
%1196 = astype(%1195, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1197 = subtract(%1190, %1196)                  # EncryptedTensor<uint1, shape=(30,)>
%1198 = sum(%1197)                              # EncryptedScalar<uint5>
%1199 = negative(%1198)                         # EncryptedScalar<int1>
%1200 = 2                                       # ClearScalar<uint2>
%1201 = power(%2, %1200)                        # EncryptedScalar<uint1>
%1202 = true_divide(%1199, %1201)               # EncryptedScalar<float64>
%1203 = exp(%1202)                              # EncryptedScalar<float64>
%1204 = %0[4]                                   # EncryptedTensor<float64, shape=(30,)>
%1205 = %3[8]                                   # EncryptedTensor<float64, shape=(30,)>
%1206 = subtract(%1204, %1205)                  # EncryptedTensor<float64, shape=(30,)>
%1207 = %0[4]                                   # EncryptedTensor<float64, shape=(30,)>
%1208 = %3[8]                                   # EncryptedTensor<float64, shape=(30,)>
%1209 = subtract(%1207, %1208)                  # EncryptedTensor<float64, shape=(30,)>
%1210 = add(%1206, %1209)                       # EncryptedTensor<float64, shape=(30,)>
%1211 = 2                                       # ClearScalar<uint2>
%1212 = power(%1210, %1211)                     # EncryptedTensor<float64, shape=(30,)>
%1213 = 4                                       # ClearScalar<uint3>
%1214 = floor_divide(%1212, %1213)              # EncryptedTensor<float64, shape=(30,)>
%1215 = astype(%1214, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1216 = subtract(%1206, %1209)                  # EncryptedTensor<float64, shape=(30,)>
%1217 = 2                                       # ClearScalar<uint2>
%1218 = power(%1216, %1217)                     # EncryptedTensor<float64, shape=(30,)>
%1219 = 4                                       # ClearScalar<uint3>
%1220 = floor_divide(%1218, %1219)              # EncryptedTensor<float64, shape=(30,)>
%1221 = astype(%1220, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1222 = subtract(%1215, %1221)                  # EncryptedTensor<uint1, shape=(30,)>
%1223 = sum(%1222)                              # EncryptedScalar<uint5>
%1224 = negative(%1223)                         # EncryptedScalar<int1>
%1225 = 2                                       # ClearScalar<uint2>
%1226 = power(%2, %1225)                        # EncryptedScalar<uint1>
%1227 = true_divide(%1224, %1226)               # EncryptedScalar<float64>
%1228 = exp(%1227)                              # EncryptedScalar<float64>
%1229 = %0[4]                                   # EncryptedTensor<float64, shape=(30,)>
%1230 = %3[9]                                   # EncryptedTensor<float64, shape=(30,)>
%1231 = subtract(%1229, %1230)                  # EncryptedTensor<float64, shape=(30,)>
%1232 = %0[4]                                   # EncryptedTensor<float64, shape=(30,)>
%1233 = %3[9]                                   # EncryptedTensor<float64, shape=(30,)>
%1234 = subtract(%1232, %1233)                  # EncryptedTensor<float64, shape=(30,)>
%1235 = add(%1231, %1234)                       # EncryptedTensor<float64, shape=(30,)>
%1236 = 2                                       # ClearScalar<uint2>
%1237 = power(%1235, %1236)                     # EncryptedTensor<float64, shape=(30,)>
%1238 = 4                                       # ClearScalar<uint3>
%1239 = floor_divide(%1237, %1238)              # EncryptedTensor<float64, shape=(30,)>
%1240 = astype(%1239, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1241 = subtract(%1231, %1234)                  # EncryptedTensor<float64, shape=(30,)>
%1242 = 2                                       # ClearScalar<uint2>
%1243 = power(%1241, %1242)                     # EncryptedTensor<float64, shape=(30,)>
%1244 = 4                                       # ClearScalar<uint3>
%1245 = floor_divide(%1243, %1244)              # EncryptedTensor<float64, shape=(30,)>
%1246 = astype(%1245, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1247 = subtract(%1240, %1246)                  # EncryptedTensor<uint1, shape=(30,)>
%1248 = sum(%1247)                              # EncryptedScalar<uint5>
%1249 = negative(%1248)                         # EncryptedScalar<int1>
%1250 = 2                                       # ClearScalar<uint2>
%1251 = power(%2, %1250)                        # EncryptedScalar<uint1>
%1252 = true_divide(%1249, %1251)               # EncryptedScalar<float64>
%1253 = exp(%1252)                              # EncryptedScalar<float64>
%1254 = %0[5]                                   # EncryptedTensor<float64, shape=(30,)>
%1255 = %3[0]                                   # EncryptedTensor<float64, shape=(30,)>
%1256 = subtract(%1254, %1255)                  # EncryptedTensor<float64, shape=(30,)>
%1257 = %0[5]                                   # EncryptedTensor<float64, shape=(30,)>
%1258 = %3[0]                                   # EncryptedTensor<float64, shape=(30,)>
%1259 = subtract(%1257, %1258)                  # EncryptedTensor<float64, shape=(30,)>
%1260 = add(%1256, %1259)                       # EncryptedTensor<float64, shape=(30,)>
%1261 = 2                                       # ClearScalar<uint2>
%1262 = power(%1260, %1261)                     # EncryptedTensor<float64, shape=(30,)>
%1263 = 4                                       # ClearScalar<uint3>
%1264 = floor_divide(%1262, %1263)              # EncryptedTensor<float64, shape=(30,)>
%1265 = astype(%1264, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1266 = subtract(%1256, %1259)                  # EncryptedTensor<float64, shape=(30,)>
%1267 = 2                                       # ClearScalar<uint2>
%1268 = power(%1266, %1267)                     # EncryptedTensor<float64, shape=(30,)>
%1269 = 4                                       # ClearScalar<uint3>
%1270 = floor_divide(%1268, %1269)              # EncryptedTensor<float64, shape=(30,)>
%1271 = astype(%1270, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1272 = subtract(%1265, %1271)                  # EncryptedTensor<uint1, shape=(30,)>
%1273 = sum(%1272)                              # EncryptedScalar<uint5>
%1274 = negative(%1273)                         # EncryptedScalar<int1>
%1275 = 2                                       # ClearScalar<uint2>
%1276 = power(%2, %1275)                        # EncryptedScalar<uint1>
%1277 = true_divide(%1274, %1276)               # EncryptedScalar<float64>
%1278 = exp(%1277)                              # EncryptedScalar<float64>
%1279 = %0[5]                                   # EncryptedTensor<float64, shape=(30,)>
%1280 = %3[1]                                   # EncryptedTensor<float64, shape=(30,)>
%1281 = subtract(%1279, %1280)                  # EncryptedTensor<float64, shape=(30,)>
%1282 = %0[5]                                   # EncryptedTensor<float64, shape=(30,)>
%1283 = %3[1]                                   # EncryptedTensor<float64, shape=(30,)>
%1284 = subtract(%1282, %1283)                  # EncryptedTensor<float64, shape=(30,)>
%1285 = add(%1281, %1284)                       # EncryptedTensor<float64, shape=(30,)>
%1286 = 2                                       # ClearScalar<uint2>
%1287 = power(%1285, %1286)                     # EncryptedTensor<float64, shape=(30,)>
%1288 = 4                                       # ClearScalar<uint3>
%1289 = floor_divide(%1287, %1288)              # EncryptedTensor<float64, shape=(30,)>
%1290 = astype(%1289, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1291 = subtract(%1281, %1284)                  # EncryptedTensor<float64, shape=(30,)>
%1292 = 2                                       # ClearScalar<uint2>
%1293 = power(%1291, %1292)                     # EncryptedTensor<float64, shape=(30,)>
%1294 = 4                                       # ClearScalar<uint3>
%1295 = floor_divide(%1293, %1294)              # EncryptedTensor<float64, shape=(30,)>
%1296 = astype(%1295, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1297 = subtract(%1290, %1296)                  # EncryptedTensor<uint1, shape=(30,)>
%1298 = sum(%1297)                              # EncryptedScalar<uint5>
%1299 = negative(%1298)                         # EncryptedScalar<int1>
%1300 = 2                                       # ClearScalar<uint2>
%1301 = power(%2, %1300)                        # EncryptedScalar<uint1>
%1302 = true_divide(%1299, %1301)               # EncryptedScalar<float64>
%1303 = exp(%1302)                              # EncryptedScalar<float64>
%1304 = %0[5]                                   # EncryptedTensor<float64, shape=(30,)>
%1305 = %3[2]                                   # EncryptedTensor<float64, shape=(30,)>
%1306 = subtract(%1304, %1305)                  # EncryptedTensor<float64, shape=(30,)>
%1307 = %0[5]                                   # EncryptedTensor<float64, shape=(30,)>
%1308 = %3[2]                                   # EncryptedTensor<float64, shape=(30,)>
%1309 = subtract(%1307, %1308)                  # EncryptedTensor<float64, shape=(30,)>
%1310 = add(%1306, %1309)                       # EncryptedTensor<float64, shape=(30,)>
%1311 = 2                                       # ClearScalar<uint2>
%1312 = power(%1310, %1311)                     # EncryptedTensor<float64, shape=(30,)>
%1313 = 4                                       # ClearScalar<uint3>
%1314 = floor_divide(%1312, %1313)              # EncryptedTensor<float64, shape=(30,)>
%1315 = astype(%1314, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1316 = subtract(%1306, %1309)                  # EncryptedTensor<float64, shape=(30,)>
%1317 = 2                                       # ClearScalar<uint2>
%1318 = power(%1316, %1317)                     # EncryptedTensor<float64, shape=(30,)>
%1319 = 4                                       # ClearScalar<uint3>
%1320 = floor_divide(%1318, %1319)              # EncryptedTensor<float64, shape=(30,)>
%1321 = astype(%1320, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1322 = subtract(%1315, %1321)                  # EncryptedTensor<uint1, shape=(30,)>
%1323 = sum(%1322)                              # EncryptedScalar<uint5>
%1324 = negative(%1323)                         # EncryptedScalar<int1>
%1325 = 2                                       # ClearScalar<uint2>
%1326 = power(%2, %1325)                        # EncryptedScalar<uint1>
%1327 = true_divide(%1324, %1326)               # EncryptedScalar<float64>
%1328 = exp(%1327)                              # EncryptedScalar<float64>
%1329 = %0[5]                                   # EncryptedTensor<float64, shape=(30,)>
%1330 = %3[3]                                   # EncryptedTensor<float64, shape=(30,)>
%1331 = subtract(%1329, %1330)                  # EncryptedTensor<float64, shape=(30,)>
%1332 = %0[5]                                   # EncryptedTensor<float64, shape=(30,)>
%1333 = %3[3]                                   # EncryptedTensor<float64, shape=(30,)>
%1334 = subtract(%1332, %1333)                  # EncryptedTensor<float64, shape=(30,)>
%1335 = add(%1331, %1334)                       # EncryptedTensor<float64, shape=(30,)>
%1336 = 2                                       # ClearScalar<uint2>
%1337 = power(%1335, %1336)                     # EncryptedTensor<float64, shape=(30,)>
%1338 = 4                                       # ClearScalar<uint3>
%1339 = floor_divide(%1337, %1338)              # EncryptedTensor<float64, shape=(30,)>
%1340 = astype(%1339, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1341 = subtract(%1331, %1334)                  # EncryptedTensor<float64, shape=(30,)>
%1342 = 2                                       # ClearScalar<uint2>
%1343 = power(%1341, %1342)                     # EncryptedTensor<float64, shape=(30,)>
%1344 = 4                                       # ClearScalar<uint3>
%1345 = floor_divide(%1343, %1344)              # EncryptedTensor<float64, shape=(30,)>
%1346 = astype(%1345, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1347 = subtract(%1340, %1346)                  # EncryptedTensor<uint1, shape=(30,)>
%1348 = sum(%1347)                              # EncryptedScalar<uint5>
%1349 = negative(%1348)                         # EncryptedScalar<int1>
%1350 = 2                                       # ClearScalar<uint2>
%1351 = power(%2, %1350)                        # EncryptedScalar<uint1>
%1352 = true_divide(%1349, %1351)               # EncryptedScalar<float64>
%1353 = exp(%1352)                              # EncryptedScalar<float64>
%1354 = %0[5]                                   # EncryptedTensor<float64, shape=(30,)>
%1355 = %3[4]                                   # EncryptedTensor<float64, shape=(30,)>
%1356 = subtract(%1354, %1355)                  # EncryptedTensor<float64, shape=(30,)>
%1357 = %0[5]                                   # EncryptedTensor<float64, shape=(30,)>
%1358 = %3[4]                                   # EncryptedTensor<float64, shape=(30,)>
%1359 = subtract(%1357, %1358)                  # EncryptedTensor<float64, shape=(30,)>
%1360 = add(%1356, %1359)                       # EncryptedTensor<float64, shape=(30,)>
%1361 = 2                                       # ClearScalar<uint2>
%1362 = power(%1360, %1361)                     # EncryptedTensor<float64, shape=(30,)>
%1363 = 4                                       # ClearScalar<uint3>
%1364 = floor_divide(%1362, %1363)              # EncryptedTensor<float64, shape=(30,)>
%1365 = astype(%1364, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1366 = subtract(%1356, %1359)                  # EncryptedTensor<float64, shape=(30,)>
%1367 = 2                                       # ClearScalar<uint2>
%1368 = power(%1366, %1367)                     # EncryptedTensor<float64, shape=(30,)>
%1369 = 4                                       # ClearScalar<uint3>
%1370 = floor_divide(%1368, %1369)              # EncryptedTensor<float64, shape=(30,)>
%1371 = astype(%1370, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1372 = subtract(%1365, %1371)                  # EncryptedTensor<uint1, shape=(30,)>
%1373 = sum(%1372)                              # EncryptedScalar<uint5>
%1374 = negative(%1373)                         # EncryptedScalar<int1>
%1375 = 2                                       # ClearScalar<uint2>
%1376 = power(%2, %1375)                        # EncryptedScalar<uint1>
%1377 = true_divide(%1374, %1376)               # EncryptedScalar<float64>
%1378 = exp(%1377)                              # EncryptedScalar<float64>
%1379 = %0[5]                                   # EncryptedTensor<float64, shape=(30,)>
%1380 = %3[5]                                   # EncryptedTensor<float64, shape=(30,)>
%1381 = subtract(%1379, %1380)                  # EncryptedTensor<float64, shape=(30,)>
%1382 = %0[5]                                   # EncryptedTensor<float64, shape=(30,)>
%1383 = %3[5]                                   # EncryptedTensor<float64, shape=(30,)>
%1384 = subtract(%1382, %1383)                  # EncryptedTensor<float64, shape=(30,)>
%1385 = add(%1381, %1384)                       # EncryptedTensor<float64, shape=(30,)>
%1386 = 2                                       # ClearScalar<uint2>
%1387 = power(%1385, %1386)                     # EncryptedTensor<float64, shape=(30,)>
%1388 = 4                                       # ClearScalar<uint3>
%1389 = floor_divide(%1387, %1388)              # EncryptedTensor<float64, shape=(30,)>
%1390 = astype(%1389, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1391 = subtract(%1381, %1384)                  # EncryptedTensor<float64, shape=(30,)>
%1392 = 2                                       # ClearScalar<uint2>
%1393 = power(%1391, %1392)                     # EncryptedTensor<float64, shape=(30,)>
%1394 = 4                                       # ClearScalar<uint3>
%1395 = floor_divide(%1393, %1394)              # EncryptedTensor<float64, shape=(30,)>
%1396 = astype(%1395, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1397 = subtract(%1390, %1396)                  # EncryptedTensor<uint1, shape=(30,)>
%1398 = sum(%1397)                              # EncryptedScalar<uint5>
%1399 = negative(%1398)                         # EncryptedScalar<int1>
%1400 = 2                                       # ClearScalar<uint2>
%1401 = power(%2, %1400)                        # EncryptedScalar<uint1>
%1402 = true_divide(%1399, %1401)               # EncryptedScalar<float64>
%1403 = exp(%1402)                              # EncryptedScalar<float64>
%1404 = %0[5]                                   # EncryptedTensor<float64, shape=(30,)>
%1405 = %3[6]                                   # EncryptedTensor<float64, shape=(30,)>
%1406 = subtract(%1404, %1405)                  # EncryptedTensor<float64, shape=(30,)>
%1407 = %0[5]                                   # EncryptedTensor<float64, shape=(30,)>
%1408 = %3[6]                                   # EncryptedTensor<float64, shape=(30,)>
%1409 = subtract(%1407, %1408)                  # EncryptedTensor<float64, shape=(30,)>
%1410 = add(%1406, %1409)                       # EncryptedTensor<float64, shape=(30,)>
%1411 = 2                                       # ClearScalar<uint2>
%1412 = power(%1410, %1411)                     # EncryptedTensor<float64, shape=(30,)>
%1413 = 4                                       # ClearScalar<uint3>
%1414 = floor_divide(%1412, %1413)              # EncryptedTensor<float64, shape=(30,)>
%1415 = astype(%1414, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1416 = subtract(%1406, %1409)                  # EncryptedTensor<float64, shape=(30,)>
%1417 = 2                                       # ClearScalar<uint2>
%1418 = power(%1416, %1417)                     # EncryptedTensor<float64, shape=(30,)>
%1419 = 4                                       # ClearScalar<uint3>
%1420 = floor_divide(%1418, %1419)              # EncryptedTensor<float64, shape=(30,)>
%1421 = astype(%1420, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1422 = subtract(%1415, %1421)                  # EncryptedTensor<uint1, shape=(30,)>
%1423 = sum(%1422)                              # EncryptedScalar<uint5>
%1424 = negative(%1423)                         # EncryptedScalar<int1>
%1425 = 2                                       # ClearScalar<uint2>
%1426 = power(%2, %1425)                        # EncryptedScalar<uint1>
%1427 = true_divide(%1424, %1426)               # EncryptedScalar<float64>
%1428 = exp(%1427)                              # EncryptedScalar<float64>
%1429 = %0[5]                                   # EncryptedTensor<float64, shape=(30,)>
%1430 = %3[7]                                   # EncryptedTensor<float64, shape=(30,)>
%1431 = subtract(%1429, %1430)                  # EncryptedTensor<float64, shape=(30,)>
%1432 = %0[5]                                   # EncryptedTensor<float64, shape=(30,)>
%1433 = %3[7]                                   # EncryptedTensor<float64, shape=(30,)>
%1434 = subtract(%1432, %1433)                  # EncryptedTensor<float64, shape=(30,)>
%1435 = add(%1431, %1434)                       # EncryptedTensor<float64, shape=(30,)>
%1436 = 2                                       # ClearScalar<uint2>
%1437 = power(%1435, %1436)                     # EncryptedTensor<float64, shape=(30,)>
%1438 = 4                                       # ClearScalar<uint3>
%1439 = floor_divide(%1437, %1438)              # EncryptedTensor<float64, shape=(30,)>
%1440 = astype(%1439, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1441 = subtract(%1431, %1434)                  # EncryptedTensor<float64, shape=(30,)>
%1442 = 2                                       # ClearScalar<uint2>
%1443 = power(%1441, %1442)                     # EncryptedTensor<float64, shape=(30,)>
%1444 = 4                                       # ClearScalar<uint3>
%1445 = floor_divide(%1443, %1444)              # EncryptedTensor<float64, shape=(30,)>
%1446 = astype(%1445, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1447 = subtract(%1440, %1446)                  # EncryptedTensor<uint1, shape=(30,)>
%1448 = sum(%1447)                              # EncryptedScalar<uint5>
%1449 = negative(%1448)                         # EncryptedScalar<int1>
%1450 = 2                                       # ClearScalar<uint2>
%1451 = power(%2, %1450)                        # EncryptedScalar<uint1>
%1452 = true_divide(%1449, %1451)               # EncryptedScalar<float64>
%1453 = exp(%1452)                              # EncryptedScalar<float64>
%1454 = %0[5]                                   # EncryptedTensor<float64, shape=(30,)>
%1455 = %3[8]                                   # EncryptedTensor<float64, shape=(30,)>
%1456 = subtract(%1454, %1455)                  # EncryptedTensor<float64, shape=(30,)>
%1457 = %0[5]                                   # EncryptedTensor<float64, shape=(30,)>
%1458 = %3[8]                                   # EncryptedTensor<float64, shape=(30,)>
%1459 = subtract(%1457, %1458)                  # EncryptedTensor<float64, shape=(30,)>
%1460 = add(%1456, %1459)                       # EncryptedTensor<float64, shape=(30,)>
%1461 = 2                                       # ClearScalar<uint2>
%1462 = power(%1460, %1461)                     # EncryptedTensor<float64, shape=(30,)>
%1463 = 4                                       # ClearScalar<uint3>
%1464 = floor_divide(%1462, %1463)              # EncryptedTensor<float64, shape=(30,)>
%1465 = astype(%1464, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1466 = subtract(%1456, %1459)                  # EncryptedTensor<float64, shape=(30,)>
%1467 = 2                                       # ClearScalar<uint2>
%1468 = power(%1466, %1467)                     # EncryptedTensor<float64, shape=(30,)>
%1469 = 4                                       # ClearScalar<uint3>
%1470 = floor_divide(%1468, %1469)              # EncryptedTensor<float64, shape=(30,)>
%1471 = astype(%1470, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1472 = subtract(%1465, %1471)                  # EncryptedTensor<uint1, shape=(30,)>
%1473 = sum(%1472)                              # EncryptedScalar<uint5>
%1474 = negative(%1473)                         # EncryptedScalar<int1>
%1475 = 2                                       # ClearScalar<uint2>
%1476 = power(%2, %1475)                        # EncryptedScalar<uint1>
%1477 = true_divide(%1474, %1476)               # EncryptedScalar<float64>
%1478 = exp(%1477)                              # EncryptedScalar<float64>
%1479 = %0[5]                                   # EncryptedTensor<float64, shape=(30,)>
%1480 = %3[9]                                   # EncryptedTensor<float64, shape=(30,)>
%1481 = subtract(%1479, %1480)                  # EncryptedTensor<float64, shape=(30,)>
%1482 = %0[5]                                   # EncryptedTensor<float64, shape=(30,)>
%1483 = %3[9]                                   # EncryptedTensor<float64, shape=(30,)>
%1484 = subtract(%1482, %1483)                  # EncryptedTensor<float64, shape=(30,)>
%1485 = add(%1481, %1484)                       # EncryptedTensor<float64, shape=(30,)>
%1486 = 2                                       # ClearScalar<uint2>
%1487 = power(%1485, %1486)                     # EncryptedTensor<float64, shape=(30,)>
%1488 = 4                                       # ClearScalar<uint3>
%1489 = floor_divide(%1487, %1488)              # EncryptedTensor<float64, shape=(30,)>
%1490 = astype(%1489, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1491 = subtract(%1481, %1484)                  # EncryptedTensor<float64, shape=(30,)>
%1492 = 2                                       # ClearScalar<uint2>
%1493 = power(%1491, %1492)                     # EncryptedTensor<float64, shape=(30,)>
%1494 = 4                                       # ClearScalar<uint3>
%1495 = floor_divide(%1493, %1494)              # EncryptedTensor<float64, shape=(30,)>
%1496 = astype(%1495, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1497 = subtract(%1490, %1496)                  # EncryptedTensor<uint1, shape=(30,)>
%1498 = sum(%1497)                              # EncryptedScalar<uint5>
%1499 = negative(%1498)                         # EncryptedScalar<int1>
%1500 = 2                                       # ClearScalar<uint2>
%1501 = power(%2, %1500)                        # EncryptedScalar<uint1>
%1502 = true_divide(%1499, %1501)               # EncryptedScalar<float64>
%1503 = exp(%1502)                              # EncryptedScalar<float64>
%1504 = %0[6]                                   # EncryptedTensor<float64, shape=(30,)>
%1505 = %3[0]                                   # EncryptedTensor<float64, shape=(30,)>
%1506 = subtract(%1504, %1505)                  # EncryptedTensor<float64, shape=(30,)>
%1507 = %0[6]                                   # EncryptedTensor<float64, shape=(30,)>
%1508 = %3[0]                                   # EncryptedTensor<float64, shape=(30,)>
%1509 = subtract(%1507, %1508)                  # EncryptedTensor<float64, shape=(30,)>
%1510 = add(%1506, %1509)                       # EncryptedTensor<float64, shape=(30,)>
%1511 = 2                                       # ClearScalar<uint2>
%1512 = power(%1510, %1511)                     # EncryptedTensor<float64, shape=(30,)>
%1513 = 4                                       # ClearScalar<uint3>
%1514 = floor_divide(%1512, %1513)              # EncryptedTensor<float64, shape=(30,)>
%1515 = astype(%1514, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1516 = subtract(%1506, %1509)                  # EncryptedTensor<float64, shape=(30,)>
%1517 = 2                                       # ClearScalar<uint2>
%1518 = power(%1516, %1517)                     # EncryptedTensor<float64, shape=(30,)>
%1519 = 4                                       # ClearScalar<uint3>
%1520 = floor_divide(%1518, %1519)              # EncryptedTensor<float64, shape=(30,)>
%1521 = astype(%1520, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1522 = subtract(%1515, %1521)                  # EncryptedTensor<uint1, shape=(30,)>
%1523 = sum(%1522)                              # EncryptedScalar<uint5>
%1524 = negative(%1523)                         # EncryptedScalar<int1>
%1525 = 2                                       # ClearScalar<uint2>
%1526 = power(%2, %1525)                        # EncryptedScalar<uint1>
%1527 = true_divide(%1524, %1526)               # EncryptedScalar<float64>
%1528 = exp(%1527)                              # EncryptedScalar<float64>
%1529 = %0[6]                                   # EncryptedTensor<float64, shape=(30,)>
%1530 = %3[1]                                   # EncryptedTensor<float64, shape=(30,)>
%1531 = subtract(%1529, %1530)                  # EncryptedTensor<float64, shape=(30,)>
%1532 = %0[6]                                   # EncryptedTensor<float64, shape=(30,)>
%1533 = %3[1]                                   # EncryptedTensor<float64, shape=(30,)>
%1534 = subtract(%1532, %1533)                  # EncryptedTensor<float64, shape=(30,)>
%1535 = add(%1531, %1534)                       # EncryptedTensor<float64, shape=(30,)>
%1536 = 2                                       # ClearScalar<uint2>
%1537 = power(%1535, %1536)                     # EncryptedTensor<float64, shape=(30,)>
%1538 = 4                                       # ClearScalar<uint3>
%1539 = floor_divide(%1537, %1538)              # EncryptedTensor<float64, shape=(30,)>
%1540 = astype(%1539, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1541 = subtract(%1531, %1534)                  # EncryptedTensor<float64, shape=(30,)>
%1542 = 2                                       # ClearScalar<uint2>
%1543 = power(%1541, %1542)                     # EncryptedTensor<float64, shape=(30,)>
%1544 = 4                                       # ClearScalar<uint3>
%1545 = floor_divide(%1543, %1544)              # EncryptedTensor<float64, shape=(30,)>
%1546 = astype(%1545, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1547 = subtract(%1540, %1546)                  # EncryptedTensor<uint1, shape=(30,)>
%1548 = sum(%1547)                              # EncryptedScalar<uint5>
%1549 = negative(%1548)                         # EncryptedScalar<int1>
%1550 = 2                                       # ClearScalar<uint2>
%1551 = power(%2, %1550)                        # EncryptedScalar<uint1>
%1552 = true_divide(%1549, %1551)               # EncryptedScalar<float64>
%1553 = exp(%1552)                              # EncryptedScalar<float64>
%1554 = %0[6]                                   # EncryptedTensor<float64, shape=(30,)>
%1555 = %3[2]                                   # EncryptedTensor<float64, shape=(30,)>
%1556 = subtract(%1554, %1555)                  # EncryptedTensor<float64, shape=(30,)>
%1557 = %0[6]                                   # EncryptedTensor<float64, shape=(30,)>
%1558 = %3[2]                                   # EncryptedTensor<float64, shape=(30,)>
%1559 = subtract(%1557, %1558)                  # EncryptedTensor<float64, shape=(30,)>
%1560 = add(%1556, %1559)                       # EncryptedTensor<float64, shape=(30,)>
%1561 = 2                                       # ClearScalar<uint2>
%1562 = power(%1560, %1561)                     # EncryptedTensor<float64, shape=(30,)>
%1563 = 4                                       # ClearScalar<uint3>
%1564 = floor_divide(%1562, %1563)              # EncryptedTensor<float64, shape=(30,)>
%1565 = astype(%1564, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1566 = subtract(%1556, %1559)                  # EncryptedTensor<float64, shape=(30,)>
%1567 = 2                                       # ClearScalar<uint2>
%1568 = power(%1566, %1567)                     # EncryptedTensor<float64, shape=(30,)>
%1569 = 4                                       # ClearScalar<uint3>
%1570 = floor_divide(%1568, %1569)              # EncryptedTensor<float64, shape=(30,)>
%1571 = astype(%1570, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1572 = subtract(%1565, %1571)                  # EncryptedTensor<uint1, shape=(30,)>
%1573 = sum(%1572)                              # EncryptedScalar<uint5>
%1574 = negative(%1573)                         # EncryptedScalar<int1>
%1575 = 2                                       # ClearScalar<uint2>
%1576 = power(%2, %1575)                        # EncryptedScalar<uint1>
%1577 = true_divide(%1574, %1576)               # EncryptedScalar<float64>
%1578 = exp(%1577)                              # EncryptedScalar<float64>
%1579 = %0[6]                                   # EncryptedTensor<float64, shape=(30,)>
%1580 = %3[3]                                   # EncryptedTensor<float64, shape=(30,)>
%1581 = subtract(%1579, %1580)                  # EncryptedTensor<float64, shape=(30,)>
%1582 = %0[6]                                   # EncryptedTensor<float64, shape=(30,)>
%1583 = %3[3]                                   # EncryptedTensor<float64, shape=(30,)>
%1584 = subtract(%1582, %1583)                  # EncryptedTensor<float64, shape=(30,)>
%1585 = add(%1581, %1584)                       # EncryptedTensor<float64, shape=(30,)>
%1586 = 2                                       # ClearScalar<uint2>
%1587 = power(%1585, %1586)                     # EncryptedTensor<float64, shape=(30,)>
%1588 = 4                                       # ClearScalar<uint3>
%1589 = floor_divide(%1587, %1588)              # EncryptedTensor<float64, shape=(30,)>
%1590 = astype(%1589, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1591 = subtract(%1581, %1584)                  # EncryptedTensor<float64, shape=(30,)>
%1592 = 2                                       # ClearScalar<uint2>
%1593 = power(%1591, %1592)                     # EncryptedTensor<float64, shape=(30,)>
%1594 = 4                                       # ClearScalar<uint3>
%1595 = floor_divide(%1593, %1594)              # EncryptedTensor<float64, shape=(30,)>
%1596 = astype(%1595, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1597 = subtract(%1590, %1596)                  # EncryptedTensor<uint1, shape=(30,)>
%1598 = sum(%1597)                              # EncryptedScalar<uint5>
%1599 = negative(%1598)                         # EncryptedScalar<int1>
%1600 = 2                                       # ClearScalar<uint2>
%1601 = power(%2, %1600)                        # EncryptedScalar<uint1>
%1602 = true_divide(%1599, %1601)               # EncryptedScalar<float64>
%1603 = exp(%1602)                              # EncryptedScalar<float64>
%1604 = %0[6]                                   # EncryptedTensor<float64, shape=(30,)>
%1605 = %3[4]                                   # EncryptedTensor<float64, shape=(30,)>
%1606 = subtract(%1604, %1605)                  # EncryptedTensor<float64, shape=(30,)>
%1607 = %0[6]                                   # EncryptedTensor<float64, shape=(30,)>
%1608 = %3[4]                                   # EncryptedTensor<float64, shape=(30,)>
%1609 = subtract(%1607, %1608)                  # EncryptedTensor<float64, shape=(30,)>
%1610 = add(%1606, %1609)                       # EncryptedTensor<float64, shape=(30,)>
%1611 = 2                                       # ClearScalar<uint2>
%1612 = power(%1610, %1611)                     # EncryptedTensor<float64, shape=(30,)>
%1613 = 4                                       # ClearScalar<uint3>
%1614 = floor_divide(%1612, %1613)              # EncryptedTensor<float64, shape=(30,)>
%1615 = astype(%1614, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1616 = subtract(%1606, %1609)                  # EncryptedTensor<float64, shape=(30,)>
%1617 = 2                                       # ClearScalar<uint2>
%1618 = power(%1616, %1617)                     # EncryptedTensor<float64, shape=(30,)>
%1619 = 4                                       # ClearScalar<uint3>
%1620 = floor_divide(%1618, %1619)              # EncryptedTensor<float64, shape=(30,)>
%1621 = astype(%1620, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1622 = subtract(%1615, %1621)                  # EncryptedTensor<uint1, shape=(30,)>
%1623 = sum(%1622)                              # EncryptedScalar<uint5>
%1624 = negative(%1623)                         # EncryptedScalar<int1>
%1625 = 2                                       # ClearScalar<uint2>
%1626 = power(%2, %1625)                        # EncryptedScalar<uint1>
%1627 = true_divide(%1624, %1626)               # EncryptedScalar<float64>
%1628 = exp(%1627)                              # EncryptedScalar<float64>
%1629 = %0[6]                                   # EncryptedTensor<float64, shape=(30,)>
%1630 = %3[5]                                   # EncryptedTensor<float64, shape=(30,)>
%1631 = subtract(%1629, %1630)                  # EncryptedTensor<float64, shape=(30,)>
%1632 = %0[6]                                   # EncryptedTensor<float64, shape=(30,)>
%1633 = %3[5]                                   # EncryptedTensor<float64, shape=(30,)>
%1634 = subtract(%1632, %1633)                  # EncryptedTensor<float64, shape=(30,)>
%1635 = add(%1631, %1634)                       # EncryptedTensor<float64, shape=(30,)>
%1636 = 2                                       # ClearScalar<uint2>
%1637 = power(%1635, %1636)                     # EncryptedTensor<float64, shape=(30,)>
%1638 = 4                                       # ClearScalar<uint3>
%1639 = floor_divide(%1637, %1638)              # EncryptedTensor<float64, shape=(30,)>
%1640 = astype(%1639, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1641 = subtract(%1631, %1634)                  # EncryptedTensor<float64, shape=(30,)>
%1642 = 2                                       # ClearScalar<uint2>
%1643 = power(%1641, %1642)                     # EncryptedTensor<float64, shape=(30,)>
%1644 = 4                                       # ClearScalar<uint3>
%1645 = floor_divide(%1643, %1644)              # EncryptedTensor<float64, shape=(30,)>
%1646 = astype(%1645, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1647 = subtract(%1640, %1646)                  # EncryptedTensor<uint1, shape=(30,)>
%1648 = sum(%1647)                              # EncryptedScalar<uint5>
%1649 = negative(%1648)                         # EncryptedScalar<int1>
%1650 = 2                                       # ClearScalar<uint2>
%1651 = power(%2, %1650)                        # EncryptedScalar<uint1>
%1652 = true_divide(%1649, %1651)               # EncryptedScalar<float64>
%1653 = exp(%1652)                              # EncryptedScalar<float64>
%1654 = %0[6]                                   # EncryptedTensor<float64, shape=(30,)>
%1655 = %3[6]                                   # EncryptedTensor<float64, shape=(30,)>
%1656 = subtract(%1654, %1655)                  # EncryptedTensor<float64, shape=(30,)>
%1657 = %0[6]                                   # EncryptedTensor<float64, shape=(30,)>
%1658 = %3[6]                                   # EncryptedTensor<float64, shape=(30,)>
%1659 = subtract(%1657, %1658)                  # EncryptedTensor<float64, shape=(30,)>
%1660 = add(%1656, %1659)                       # EncryptedTensor<float64, shape=(30,)>
%1661 = 2                                       # ClearScalar<uint2>
%1662 = power(%1660, %1661)                     # EncryptedTensor<float64, shape=(30,)>
%1663 = 4                                       # ClearScalar<uint3>
%1664 = floor_divide(%1662, %1663)              # EncryptedTensor<float64, shape=(30,)>
%1665 = astype(%1664, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1666 = subtract(%1656, %1659)                  # EncryptedTensor<float64, shape=(30,)>
%1667 = 2                                       # ClearScalar<uint2>
%1668 = power(%1666, %1667)                     # EncryptedTensor<float64, shape=(30,)>
%1669 = 4                                       # ClearScalar<uint3>
%1670 = floor_divide(%1668, %1669)              # EncryptedTensor<float64, shape=(30,)>
%1671 = astype(%1670, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1672 = subtract(%1665, %1671)                  # EncryptedTensor<uint1, shape=(30,)>
%1673 = sum(%1672)                              # EncryptedScalar<uint5>
%1674 = negative(%1673)                         # EncryptedScalar<int1>
%1675 = 2                                       # ClearScalar<uint2>
%1676 = power(%2, %1675)                        # EncryptedScalar<uint1>
%1677 = true_divide(%1674, %1676)               # EncryptedScalar<float64>
%1678 = exp(%1677)                              # EncryptedScalar<float64>
%1679 = %0[6]                                   # EncryptedTensor<float64, shape=(30,)>
%1680 = %3[7]                                   # EncryptedTensor<float64, shape=(30,)>
%1681 = subtract(%1679, %1680)                  # EncryptedTensor<float64, shape=(30,)>
%1682 = %0[6]                                   # EncryptedTensor<float64, shape=(30,)>
%1683 = %3[7]                                   # EncryptedTensor<float64, shape=(30,)>
%1684 = subtract(%1682, %1683)                  # EncryptedTensor<float64, shape=(30,)>
%1685 = add(%1681, %1684)                       # EncryptedTensor<float64, shape=(30,)>
%1686 = 2                                       # ClearScalar<uint2>
%1687 = power(%1685, %1686)                     # EncryptedTensor<float64, shape=(30,)>
%1688 = 4                                       # ClearScalar<uint3>
%1689 = floor_divide(%1687, %1688)              # EncryptedTensor<float64, shape=(30,)>
%1690 = astype(%1689, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1691 = subtract(%1681, %1684)                  # EncryptedTensor<float64, shape=(30,)>
%1692 = 2                                       # ClearScalar<uint2>
%1693 = power(%1691, %1692)                     # EncryptedTensor<float64, shape=(30,)>
%1694 = 4                                       # ClearScalar<uint3>
%1695 = floor_divide(%1693, %1694)              # EncryptedTensor<float64, shape=(30,)>
%1696 = astype(%1695, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1697 = subtract(%1690, %1696)                  # EncryptedTensor<uint1, shape=(30,)>
%1698 = sum(%1697)                              # EncryptedScalar<uint5>
%1699 = negative(%1698)                         # EncryptedScalar<int1>
%1700 = 2                                       # ClearScalar<uint2>
%1701 = power(%2, %1700)                        # EncryptedScalar<uint1>
%1702 = true_divide(%1699, %1701)               # EncryptedScalar<float64>
%1703 = exp(%1702)                              # EncryptedScalar<float64>
%1704 = %0[6]                                   # EncryptedTensor<float64, shape=(30,)>
%1705 = %3[8]                                   # EncryptedTensor<float64, shape=(30,)>
%1706 = subtract(%1704, %1705)                  # EncryptedTensor<float64, shape=(30,)>
%1707 = %0[6]                                   # EncryptedTensor<float64, shape=(30,)>
%1708 = %3[8]                                   # EncryptedTensor<float64, shape=(30,)>
%1709 = subtract(%1707, %1708)                  # EncryptedTensor<float64, shape=(30,)>
%1710 = add(%1706, %1709)                       # EncryptedTensor<float64, shape=(30,)>
%1711 = 2                                       # ClearScalar<uint2>
%1712 = power(%1710, %1711)                     # EncryptedTensor<float64, shape=(30,)>
%1713 = 4                                       # ClearScalar<uint3>
%1714 = floor_divide(%1712, %1713)              # EncryptedTensor<float64, shape=(30,)>
%1715 = astype(%1714, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1716 = subtract(%1706, %1709)                  # EncryptedTensor<float64, shape=(30,)>
%1717 = 2                                       # ClearScalar<uint2>
%1718 = power(%1716, %1717)                     # EncryptedTensor<float64, shape=(30,)>
%1719 = 4                                       # ClearScalar<uint3>
%1720 = floor_divide(%1718, %1719)              # EncryptedTensor<float64, shape=(30,)>
%1721 = astype(%1720, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1722 = subtract(%1715, %1721)                  # EncryptedTensor<uint1, shape=(30,)>
%1723 = sum(%1722)                              # EncryptedScalar<uint5>
%1724 = negative(%1723)                         # EncryptedScalar<int1>
%1725 = 2                                       # ClearScalar<uint2>
%1726 = power(%2, %1725)                        # EncryptedScalar<uint1>
%1727 = true_divide(%1724, %1726)               # EncryptedScalar<float64>
%1728 = exp(%1727)                              # EncryptedScalar<float64>
%1729 = %0[6]                                   # EncryptedTensor<float64, shape=(30,)>
%1730 = %3[9]                                   # EncryptedTensor<float64, shape=(30,)>
%1731 = subtract(%1729, %1730)                  # EncryptedTensor<float64, shape=(30,)>
%1732 = %0[6]                                   # EncryptedTensor<float64, shape=(30,)>
%1733 = %3[9]                                   # EncryptedTensor<float64, shape=(30,)>
%1734 = subtract(%1732, %1733)                  # EncryptedTensor<float64, shape=(30,)>
%1735 = add(%1731, %1734)                       # EncryptedTensor<float64, shape=(30,)>
%1736 = 2                                       # ClearScalar<uint2>
%1737 = power(%1735, %1736)                     # EncryptedTensor<float64, shape=(30,)>
%1738 = 4                                       # ClearScalar<uint3>
%1739 = floor_divide(%1737, %1738)              # EncryptedTensor<float64, shape=(30,)>
%1740 = astype(%1739, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1741 = subtract(%1731, %1734)                  # EncryptedTensor<float64, shape=(30,)>
%1742 = 2                                       # ClearScalar<uint2>
%1743 = power(%1741, %1742)                     # EncryptedTensor<float64, shape=(30,)>
%1744 = 4                                       # ClearScalar<uint3>
%1745 = floor_divide(%1743, %1744)              # EncryptedTensor<float64, shape=(30,)>
%1746 = astype(%1745, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1747 = subtract(%1740, %1746)                  # EncryptedTensor<uint1, shape=(30,)>
%1748 = sum(%1747)                              # EncryptedScalar<uint5>
%1749 = negative(%1748)                         # EncryptedScalar<int1>
%1750 = 2                                       # ClearScalar<uint2>
%1751 = power(%2, %1750)                        # EncryptedScalar<uint1>
%1752 = true_divide(%1749, %1751)               # EncryptedScalar<float64>
%1753 = exp(%1752)                              # EncryptedScalar<float64>
%1754 = %0[7]                                   # EncryptedTensor<float64, shape=(30,)>
%1755 = %3[0]                                   # EncryptedTensor<float64, shape=(30,)>
%1756 = subtract(%1754, %1755)                  # EncryptedTensor<float64, shape=(30,)>
%1757 = %0[7]                                   # EncryptedTensor<float64, shape=(30,)>
%1758 = %3[0]                                   # EncryptedTensor<float64, shape=(30,)>
%1759 = subtract(%1757, %1758)                  # EncryptedTensor<float64, shape=(30,)>
%1760 = add(%1756, %1759)                       # EncryptedTensor<float64, shape=(30,)>
%1761 = 2                                       # ClearScalar<uint2>
%1762 = power(%1760, %1761)                     # EncryptedTensor<float64, shape=(30,)>
%1763 = 4                                       # ClearScalar<uint3>
%1764 = floor_divide(%1762, %1763)              # EncryptedTensor<float64, shape=(30,)>
%1765 = astype(%1764, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1766 = subtract(%1756, %1759)                  # EncryptedTensor<float64, shape=(30,)>
%1767 = 2                                       # ClearScalar<uint2>
%1768 = power(%1766, %1767)                     # EncryptedTensor<float64, shape=(30,)>
%1769 = 4                                       # ClearScalar<uint3>
%1770 = floor_divide(%1768, %1769)              # EncryptedTensor<float64, shape=(30,)>
%1771 = astype(%1770, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1772 = subtract(%1765, %1771)                  # EncryptedTensor<uint1, shape=(30,)>
%1773 = sum(%1772)                              # EncryptedScalar<uint5>
%1774 = negative(%1773)                         # EncryptedScalar<int1>
%1775 = 2                                       # ClearScalar<uint2>
%1776 = power(%2, %1775)                        # EncryptedScalar<uint1>
%1777 = true_divide(%1774, %1776)               # EncryptedScalar<float64>
%1778 = exp(%1777)                              # EncryptedScalar<float64>
%1779 = %0[7]                                   # EncryptedTensor<float64, shape=(30,)>
%1780 = %3[1]                                   # EncryptedTensor<float64, shape=(30,)>
%1781 = subtract(%1779, %1780)                  # EncryptedTensor<float64, shape=(30,)>
%1782 = %0[7]                                   # EncryptedTensor<float64, shape=(30,)>
%1783 = %3[1]                                   # EncryptedTensor<float64, shape=(30,)>
%1784 = subtract(%1782, %1783)                  # EncryptedTensor<float64, shape=(30,)>
%1785 = add(%1781, %1784)                       # EncryptedTensor<float64, shape=(30,)>
%1786 = 2                                       # ClearScalar<uint2>
%1787 = power(%1785, %1786)                     # EncryptedTensor<float64, shape=(30,)>
%1788 = 4                                       # ClearScalar<uint3>
%1789 = floor_divide(%1787, %1788)              # EncryptedTensor<float64, shape=(30,)>
%1790 = astype(%1789, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1791 = subtract(%1781, %1784)                  # EncryptedTensor<float64, shape=(30,)>
%1792 = 2                                       # ClearScalar<uint2>
%1793 = power(%1791, %1792)                     # EncryptedTensor<float64, shape=(30,)>
%1794 = 4                                       # ClearScalar<uint3>
%1795 = floor_divide(%1793, %1794)              # EncryptedTensor<float64, shape=(30,)>
%1796 = astype(%1795, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1797 = subtract(%1790, %1796)                  # EncryptedTensor<uint1, shape=(30,)>
%1798 = sum(%1797)                              # EncryptedScalar<uint5>
%1799 = negative(%1798)                         # EncryptedScalar<int1>
%1800 = 2                                       # ClearScalar<uint2>
%1801 = power(%2, %1800)                        # EncryptedScalar<uint1>
%1802 = true_divide(%1799, %1801)               # EncryptedScalar<float64>
%1803 = exp(%1802)                              # EncryptedScalar<float64>
%1804 = %0[7]                                   # EncryptedTensor<float64, shape=(30,)>
%1805 = %3[2]                                   # EncryptedTensor<float64, shape=(30,)>
%1806 = subtract(%1804, %1805)                  # EncryptedTensor<float64, shape=(30,)>
%1807 = %0[7]                                   # EncryptedTensor<float64, shape=(30,)>
%1808 = %3[2]                                   # EncryptedTensor<float64, shape=(30,)>
%1809 = subtract(%1807, %1808)                  # EncryptedTensor<float64, shape=(30,)>
%1810 = add(%1806, %1809)                       # EncryptedTensor<float64, shape=(30,)>
%1811 = 2                                       # ClearScalar<uint2>
%1812 = power(%1810, %1811)                     # EncryptedTensor<float64, shape=(30,)>
%1813 = 4                                       # ClearScalar<uint3>
%1814 = floor_divide(%1812, %1813)              # EncryptedTensor<float64, shape=(30,)>
%1815 = astype(%1814, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1816 = subtract(%1806, %1809)                  # EncryptedTensor<float64, shape=(30,)>
%1817 = 2                                       # ClearScalar<uint2>
%1818 = power(%1816, %1817)                     # EncryptedTensor<float64, shape=(30,)>
%1819 = 4                                       # ClearScalar<uint3>
%1820 = floor_divide(%1818, %1819)              # EncryptedTensor<float64, shape=(30,)>
%1821 = astype(%1820, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1822 = subtract(%1815, %1821)                  # EncryptedTensor<uint1, shape=(30,)>
%1823 = sum(%1822)                              # EncryptedScalar<uint5>
%1824 = negative(%1823)                         # EncryptedScalar<int1>
%1825 = 2                                       # ClearScalar<uint2>
%1826 = power(%2, %1825)                        # EncryptedScalar<uint1>
%1827 = true_divide(%1824, %1826)               # EncryptedScalar<float64>
%1828 = exp(%1827)                              # EncryptedScalar<float64>
%1829 = %0[7]                                   # EncryptedTensor<float64, shape=(30,)>
%1830 = %3[3]                                   # EncryptedTensor<float64, shape=(30,)>
%1831 = subtract(%1829, %1830)                  # EncryptedTensor<float64, shape=(30,)>
%1832 = %0[7]                                   # EncryptedTensor<float64, shape=(30,)>
%1833 = %3[3]                                   # EncryptedTensor<float64, shape=(30,)>
%1834 = subtract(%1832, %1833)                  # EncryptedTensor<float64, shape=(30,)>
%1835 = add(%1831, %1834)                       # EncryptedTensor<float64, shape=(30,)>
%1836 = 2                                       # ClearScalar<uint2>
%1837 = power(%1835, %1836)                     # EncryptedTensor<float64, shape=(30,)>
%1838 = 4                                       # ClearScalar<uint3>
%1839 = floor_divide(%1837, %1838)              # EncryptedTensor<float64, shape=(30,)>
%1840 = astype(%1839, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1841 = subtract(%1831, %1834)                  # EncryptedTensor<float64, shape=(30,)>
%1842 = 2                                       # ClearScalar<uint2>
%1843 = power(%1841, %1842)                     # EncryptedTensor<float64, shape=(30,)>
%1844 = 4                                       # ClearScalar<uint3>
%1845 = floor_divide(%1843, %1844)              # EncryptedTensor<float64, shape=(30,)>
%1846 = astype(%1845, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1847 = subtract(%1840, %1846)                  # EncryptedTensor<uint1, shape=(30,)>
%1848 = sum(%1847)                              # EncryptedScalar<uint5>
%1849 = negative(%1848)                         # EncryptedScalar<int1>
%1850 = 2                                       # ClearScalar<uint2>
%1851 = power(%2, %1850)                        # EncryptedScalar<uint1>
%1852 = true_divide(%1849, %1851)               # EncryptedScalar<float64>
%1853 = exp(%1852)                              # EncryptedScalar<float64>
%1854 = %0[7]                                   # EncryptedTensor<float64, shape=(30,)>
%1855 = %3[4]                                   # EncryptedTensor<float64, shape=(30,)>
%1856 = subtract(%1854, %1855)                  # EncryptedTensor<float64, shape=(30,)>
%1857 = %0[7]                                   # EncryptedTensor<float64, shape=(30,)>
%1858 = %3[4]                                   # EncryptedTensor<float64, shape=(30,)>
%1859 = subtract(%1857, %1858)                  # EncryptedTensor<float64, shape=(30,)>
%1860 = add(%1856, %1859)                       # EncryptedTensor<float64, shape=(30,)>
%1861 = 2                                       # ClearScalar<uint2>
%1862 = power(%1860, %1861)                     # EncryptedTensor<float64, shape=(30,)>
%1863 = 4                                       # ClearScalar<uint3>
%1864 = floor_divide(%1862, %1863)              # EncryptedTensor<float64, shape=(30,)>
%1865 = astype(%1864, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1866 = subtract(%1856, %1859)                  # EncryptedTensor<float64, shape=(30,)>
%1867 = 2                                       # ClearScalar<uint2>
%1868 = power(%1866, %1867)                     # EncryptedTensor<float64, shape=(30,)>
%1869 = 4                                       # ClearScalar<uint3>
%1870 = floor_divide(%1868, %1869)              # EncryptedTensor<float64, shape=(30,)>
%1871 = astype(%1870, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1872 = subtract(%1865, %1871)                  # EncryptedTensor<uint1, shape=(30,)>
%1873 = sum(%1872)                              # EncryptedScalar<uint5>
%1874 = negative(%1873)                         # EncryptedScalar<int1>
%1875 = 2                                       # ClearScalar<uint2>
%1876 = power(%2, %1875)                        # EncryptedScalar<uint1>
%1877 = true_divide(%1874, %1876)               # EncryptedScalar<float64>
%1878 = exp(%1877)                              # EncryptedScalar<float64>
%1879 = %0[7]                                   # EncryptedTensor<float64, shape=(30,)>
%1880 = %3[5]                                   # EncryptedTensor<float64, shape=(30,)>
%1881 = subtract(%1879, %1880)                  # EncryptedTensor<float64, shape=(30,)>
%1882 = %0[7]                                   # EncryptedTensor<float64, shape=(30,)>
%1883 = %3[5]                                   # EncryptedTensor<float64, shape=(30,)>
%1884 = subtract(%1882, %1883)                  # EncryptedTensor<float64, shape=(30,)>
%1885 = add(%1881, %1884)                       # EncryptedTensor<float64, shape=(30,)>
%1886 = 2                                       # ClearScalar<uint2>
%1887 = power(%1885, %1886)                     # EncryptedTensor<float64, shape=(30,)>
%1888 = 4                                       # ClearScalar<uint3>
%1889 = floor_divide(%1887, %1888)              # EncryptedTensor<float64, shape=(30,)>
%1890 = astype(%1889, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1891 = subtract(%1881, %1884)                  # EncryptedTensor<float64, shape=(30,)>
%1892 = 2                                       # ClearScalar<uint2>
%1893 = power(%1891, %1892)                     # EncryptedTensor<float64, shape=(30,)>
%1894 = 4                                       # ClearScalar<uint3>
%1895 = floor_divide(%1893, %1894)              # EncryptedTensor<float64, shape=(30,)>
%1896 = astype(%1895, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1897 = subtract(%1890, %1896)                  # EncryptedTensor<uint1, shape=(30,)>
%1898 = sum(%1897)                              # EncryptedScalar<uint5>
%1899 = negative(%1898)                         # EncryptedScalar<int1>
%1900 = 2                                       # ClearScalar<uint2>
%1901 = power(%2, %1900)                        # EncryptedScalar<uint1>
%1902 = true_divide(%1899, %1901)               # EncryptedScalar<float64>
%1903 = exp(%1902)                              # EncryptedScalar<float64>
%1904 = %0[7]                                   # EncryptedTensor<float64, shape=(30,)>
%1905 = %3[6]                                   # EncryptedTensor<float64, shape=(30,)>
%1906 = subtract(%1904, %1905)                  # EncryptedTensor<float64, shape=(30,)>
%1907 = %0[7]                                   # EncryptedTensor<float64, shape=(30,)>
%1908 = %3[6]                                   # EncryptedTensor<float64, shape=(30,)>
%1909 = subtract(%1907, %1908)                  # EncryptedTensor<float64, shape=(30,)>
%1910 = add(%1906, %1909)                       # EncryptedTensor<float64, shape=(30,)>
%1911 = 2                                       # ClearScalar<uint2>
%1912 = power(%1910, %1911)                     # EncryptedTensor<float64, shape=(30,)>
%1913 = 4                                       # ClearScalar<uint3>
%1914 = floor_divide(%1912, %1913)              # EncryptedTensor<float64, shape=(30,)>
%1915 = astype(%1914, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1916 = subtract(%1906, %1909)                  # EncryptedTensor<float64, shape=(30,)>
%1917 = 2                                       # ClearScalar<uint2>
%1918 = power(%1916, %1917)                     # EncryptedTensor<float64, shape=(30,)>
%1919 = 4                                       # ClearScalar<uint3>
%1920 = floor_divide(%1918, %1919)              # EncryptedTensor<float64, shape=(30,)>
%1921 = astype(%1920, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1922 = subtract(%1915, %1921)                  # EncryptedTensor<uint1, shape=(30,)>
%1923 = sum(%1922)                              # EncryptedScalar<uint5>
%1924 = negative(%1923)                         # EncryptedScalar<int1>
%1925 = 2                                       # ClearScalar<uint2>
%1926 = power(%2, %1925)                        # EncryptedScalar<uint1>
%1927 = true_divide(%1924, %1926)               # EncryptedScalar<float64>
%1928 = exp(%1927)                              # EncryptedScalar<float64>
%1929 = %0[7]                                   # EncryptedTensor<float64, shape=(30,)>
%1930 = %3[7]                                   # EncryptedTensor<float64, shape=(30,)>
%1931 = subtract(%1929, %1930)                  # EncryptedTensor<float64, shape=(30,)>
%1932 = %0[7]                                   # EncryptedTensor<float64, shape=(30,)>
%1933 = %3[7]                                   # EncryptedTensor<float64, shape=(30,)>
%1934 = subtract(%1932, %1933)                  # EncryptedTensor<float64, shape=(30,)>
%1935 = add(%1931, %1934)                       # EncryptedTensor<float64, shape=(30,)>
%1936 = 2                                       # ClearScalar<uint2>
%1937 = power(%1935, %1936)                     # EncryptedTensor<float64, shape=(30,)>
%1938 = 4                                       # ClearScalar<uint3>
%1939 = floor_divide(%1937, %1938)              # EncryptedTensor<float64, shape=(30,)>
%1940 = astype(%1939, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1941 = subtract(%1931, %1934)                  # EncryptedTensor<float64, shape=(30,)>
%1942 = 2                                       # ClearScalar<uint2>
%1943 = power(%1941, %1942)                     # EncryptedTensor<float64, shape=(30,)>
%1944 = 4                                       # ClearScalar<uint3>
%1945 = floor_divide(%1943, %1944)              # EncryptedTensor<float64, shape=(30,)>
%1946 = astype(%1945, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1947 = subtract(%1940, %1946)                  # EncryptedTensor<uint1, shape=(30,)>
%1948 = sum(%1947)                              # EncryptedScalar<uint5>
%1949 = negative(%1948)                         # EncryptedScalar<int1>
%1950 = 2                                       # ClearScalar<uint2>
%1951 = power(%2, %1950)                        # EncryptedScalar<uint1>
%1952 = true_divide(%1949, %1951)               # EncryptedScalar<float64>
%1953 = exp(%1952)                              # EncryptedScalar<float64>
%1954 = %0[7]                                   # EncryptedTensor<float64, shape=(30,)>
%1955 = %3[8]                                   # EncryptedTensor<float64, shape=(30,)>
%1956 = subtract(%1954, %1955)                  # EncryptedTensor<float64, shape=(30,)>
%1957 = %0[7]                                   # EncryptedTensor<float64, shape=(30,)>
%1958 = %3[8]                                   # EncryptedTensor<float64, shape=(30,)>
%1959 = subtract(%1957, %1958)                  # EncryptedTensor<float64, shape=(30,)>
%1960 = add(%1956, %1959)                       # EncryptedTensor<float64, shape=(30,)>
%1961 = 2                                       # ClearScalar<uint2>
%1962 = power(%1960, %1961)                     # EncryptedTensor<float64, shape=(30,)>
%1963 = 4                                       # ClearScalar<uint3>
%1964 = floor_divide(%1962, %1963)              # EncryptedTensor<float64, shape=(30,)>
%1965 = astype(%1964, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1966 = subtract(%1956, %1959)                  # EncryptedTensor<float64, shape=(30,)>
%1967 = 2                                       # ClearScalar<uint2>
%1968 = power(%1966, %1967)                     # EncryptedTensor<float64, shape=(30,)>
%1969 = 4                                       # ClearScalar<uint3>
%1970 = floor_divide(%1968, %1969)              # EncryptedTensor<float64, shape=(30,)>
%1971 = astype(%1970, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1972 = subtract(%1965, %1971)                  # EncryptedTensor<uint1, shape=(30,)>
%1973 = sum(%1972)                              # EncryptedScalar<uint5>
%1974 = negative(%1973)                         # EncryptedScalar<int1>
%1975 = 2                                       # ClearScalar<uint2>
%1976 = power(%2, %1975)                        # EncryptedScalar<uint1>
%1977 = true_divide(%1974, %1976)               # EncryptedScalar<float64>
%1978 = exp(%1977)                              # EncryptedScalar<float64>
%1979 = %0[7]                                   # EncryptedTensor<float64, shape=(30,)>
%1980 = %3[9]                                   # EncryptedTensor<float64, shape=(30,)>
%1981 = subtract(%1979, %1980)                  # EncryptedTensor<float64, shape=(30,)>
%1982 = %0[7]                                   # EncryptedTensor<float64, shape=(30,)>
%1983 = %3[9]                                   # EncryptedTensor<float64, shape=(30,)>
%1984 = subtract(%1982, %1983)                  # EncryptedTensor<float64, shape=(30,)>
%1985 = add(%1981, %1984)                       # EncryptedTensor<float64, shape=(30,)>
%1986 = 2                                       # ClearScalar<uint2>
%1987 = power(%1985, %1986)                     # EncryptedTensor<float64, shape=(30,)>
%1988 = 4                                       # ClearScalar<uint3>
%1989 = floor_divide(%1987, %1988)              # EncryptedTensor<float64, shape=(30,)>
%1990 = astype(%1989, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1991 = subtract(%1981, %1984)                  # EncryptedTensor<float64, shape=(30,)>
%1992 = 2                                       # ClearScalar<uint2>
%1993 = power(%1991, %1992)                     # EncryptedTensor<float64, shape=(30,)>
%1994 = 4                                       # ClearScalar<uint3>
%1995 = floor_divide(%1993, %1994)              # EncryptedTensor<float64, shape=(30,)>
%1996 = astype(%1995, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%1997 = subtract(%1990, %1996)                  # EncryptedTensor<uint1, shape=(30,)>
%1998 = sum(%1997)                              # EncryptedScalar<uint5>
%1999 = negative(%1998)                         # EncryptedScalar<int1>
%2000 = 2                                       # ClearScalar<uint2>
%2001 = power(%2, %2000)                        # EncryptedScalar<uint1>
%2002 = true_divide(%1999, %2001)               # EncryptedScalar<float64>
%2003 = exp(%2002)                              # EncryptedScalar<float64>
%2004 = %0[8]                                   # EncryptedTensor<float64, shape=(30,)>
%2005 = %3[0]                                   # EncryptedTensor<float64, shape=(30,)>
%2006 = subtract(%2004, %2005)                  # EncryptedTensor<float64, shape=(30,)>
%2007 = %0[8]                                   # EncryptedTensor<float64, shape=(30,)>
%2008 = %3[0]                                   # EncryptedTensor<float64, shape=(30,)>
%2009 = subtract(%2007, %2008)                  # EncryptedTensor<float64, shape=(30,)>
%2010 = add(%2006, %2009)                       # EncryptedTensor<float64, shape=(30,)>
%2011 = 2                                       # ClearScalar<uint2>
%2012 = power(%2010, %2011)                     # EncryptedTensor<float64, shape=(30,)>
%2013 = 4                                       # ClearScalar<uint3>
%2014 = floor_divide(%2012, %2013)              # EncryptedTensor<float64, shape=(30,)>
%2015 = astype(%2014, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2016 = subtract(%2006, %2009)                  # EncryptedTensor<float64, shape=(30,)>
%2017 = 2                                       # ClearScalar<uint2>
%2018 = power(%2016, %2017)                     # EncryptedTensor<float64, shape=(30,)>
%2019 = 4                                       # ClearScalar<uint3>
%2020 = floor_divide(%2018, %2019)              # EncryptedTensor<float64, shape=(30,)>
%2021 = astype(%2020, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2022 = subtract(%2015, %2021)                  # EncryptedTensor<uint1, shape=(30,)>
%2023 = sum(%2022)                              # EncryptedScalar<uint5>
%2024 = negative(%2023)                         # EncryptedScalar<int1>
%2025 = 2                                       # ClearScalar<uint2>
%2026 = power(%2, %2025)                        # EncryptedScalar<uint1>
%2027 = true_divide(%2024, %2026)               # EncryptedScalar<float64>
%2028 = exp(%2027)                              # EncryptedScalar<float64>
%2029 = %0[8]                                   # EncryptedTensor<float64, shape=(30,)>
%2030 = %3[1]                                   # EncryptedTensor<float64, shape=(30,)>
%2031 = subtract(%2029, %2030)                  # EncryptedTensor<float64, shape=(30,)>
%2032 = %0[8]                                   # EncryptedTensor<float64, shape=(30,)>
%2033 = %3[1]                                   # EncryptedTensor<float64, shape=(30,)>
%2034 = subtract(%2032, %2033)                  # EncryptedTensor<float64, shape=(30,)>
%2035 = add(%2031, %2034)                       # EncryptedTensor<float64, shape=(30,)>
%2036 = 2                                       # ClearScalar<uint2>
%2037 = power(%2035, %2036)                     # EncryptedTensor<float64, shape=(30,)>
%2038 = 4                                       # ClearScalar<uint3>
%2039 = floor_divide(%2037, %2038)              # EncryptedTensor<float64, shape=(30,)>
%2040 = astype(%2039, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2041 = subtract(%2031, %2034)                  # EncryptedTensor<float64, shape=(30,)>
%2042 = 2                                       # ClearScalar<uint2>
%2043 = power(%2041, %2042)                     # EncryptedTensor<float64, shape=(30,)>
%2044 = 4                                       # ClearScalar<uint3>
%2045 = floor_divide(%2043, %2044)              # EncryptedTensor<float64, shape=(30,)>
%2046 = astype(%2045, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2047 = subtract(%2040, %2046)                  # EncryptedTensor<uint1, shape=(30,)>
%2048 = sum(%2047)                              # EncryptedScalar<uint5>
%2049 = negative(%2048)                         # EncryptedScalar<int1>
%2050 = 2                                       # ClearScalar<uint2>
%2051 = power(%2, %2050)                        # EncryptedScalar<uint1>
%2052 = true_divide(%2049, %2051)               # EncryptedScalar<float64>
%2053 = exp(%2052)                              # EncryptedScalar<float64>
%2054 = %0[8]                                   # EncryptedTensor<float64, shape=(30,)>
%2055 = %3[2]                                   # EncryptedTensor<float64, shape=(30,)>
%2056 = subtract(%2054, %2055)                  # EncryptedTensor<float64, shape=(30,)>
%2057 = %0[8]                                   # EncryptedTensor<float64, shape=(30,)>
%2058 = %3[2]                                   # EncryptedTensor<float64, shape=(30,)>
%2059 = subtract(%2057, %2058)                  # EncryptedTensor<float64, shape=(30,)>
%2060 = add(%2056, %2059)                       # EncryptedTensor<float64, shape=(30,)>
%2061 = 2                                       # ClearScalar<uint2>
%2062 = power(%2060, %2061)                     # EncryptedTensor<float64, shape=(30,)>
%2063 = 4                                       # ClearScalar<uint3>
%2064 = floor_divide(%2062, %2063)              # EncryptedTensor<float64, shape=(30,)>
%2065 = astype(%2064, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2066 = subtract(%2056, %2059)                  # EncryptedTensor<float64, shape=(30,)>
%2067 = 2                                       # ClearScalar<uint2>
%2068 = power(%2066, %2067)                     # EncryptedTensor<float64, shape=(30,)>
%2069 = 4                                       # ClearScalar<uint3>
%2070 = floor_divide(%2068, %2069)              # EncryptedTensor<float64, shape=(30,)>
%2071 = astype(%2070, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2072 = subtract(%2065, %2071)                  # EncryptedTensor<uint1, shape=(30,)>
%2073 = sum(%2072)                              # EncryptedScalar<uint5>
%2074 = negative(%2073)                         # EncryptedScalar<int1>
%2075 = 2                                       # ClearScalar<uint2>
%2076 = power(%2, %2075)                        # EncryptedScalar<uint1>
%2077 = true_divide(%2074, %2076)               # EncryptedScalar<float64>
%2078 = exp(%2077)                              # EncryptedScalar<float64>
%2079 = %0[8]                                   # EncryptedTensor<float64, shape=(30,)>
%2080 = %3[3]                                   # EncryptedTensor<float64, shape=(30,)>
%2081 = subtract(%2079, %2080)                  # EncryptedTensor<float64, shape=(30,)>
%2082 = %0[8]                                   # EncryptedTensor<float64, shape=(30,)>
%2083 = %3[3]                                   # EncryptedTensor<float64, shape=(30,)>
%2084 = subtract(%2082, %2083)                  # EncryptedTensor<float64, shape=(30,)>
%2085 = add(%2081, %2084)                       # EncryptedTensor<float64, shape=(30,)>
%2086 = 2                                       # ClearScalar<uint2>
%2087 = power(%2085, %2086)                     # EncryptedTensor<float64, shape=(30,)>
%2088 = 4                                       # ClearScalar<uint3>
%2089 = floor_divide(%2087, %2088)              # EncryptedTensor<float64, shape=(30,)>
%2090 = astype(%2089, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2091 = subtract(%2081, %2084)                  # EncryptedTensor<float64, shape=(30,)>
%2092 = 2                                       # ClearScalar<uint2>
%2093 = power(%2091, %2092)                     # EncryptedTensor<float64, shape=(30,)>
%2094 = 4                                       # ClearScalar<uint3>
%2095 = floor_divide(%2093, %2094)              # EncryptedTensor<float64, shape=(30,)>
%2096 = astype(%2095, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2097 = subtract(%2090, %2096)                  # EncryptedTensor<uint1, shape=(30,)>
%2098 = sum(%2097)                              # EncryptedScalar<uint5>
%2099 = negative(%2098)                         # EncryptedScalar<int1>
%2100 = 2                                       # ClearScalar<uint2>
%2101 = power(%2, %2100)                        # EncryptedScalar<uint1>
%2102 = true_divide(%2099, %2101)               # EncryptedScalar<float64>
%2103 = exp(%2102)                              # EncryptedScalar<float64>
%2104 = %0[8]                                   # EncryptedTensor<float64, shape=(30,)>
%2105 = %3[4]                                   # EncryptedTensor<float64, shape=(30,)>
%2106 = subtract(%2104, %2105)                  # EncryptedTensor<float64, shape=(30,)>
%2107 = %0[8]                                   # EncryptedTensor<float64, shape=(30,)>
%2108 = %3[4]                                   # EncryptedTensor<float64, shape=(30,)>
%2109 = subtract(%2107, %2108)                  # EncryptedTensor<float64, shape=(30,)>
%2110 = add(%2106, %2109)                       # EncryptedTensor<float64, shape=(30,)>
%2111 = 2                                       # ClearScalar<uint2>
%2112 = power(%2110, %2111)                     # EncryptedTensor<float64, shape=(30,)>
%2113 = 4                                       # ClearScalar<uint3>
%2114 = floor_divide(%2112, %2113)              # EncryptedTensor<float64, shape=(30,)>
%2115 = astype(%2114, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2116 = subtract(%2106, %2109)                  # EncryptedTensor<float64, shape=(30,)>
%2117 = 2                                       # ClearScalar<uint2>
%2118 = power(%2116, %2117)                     # EncryptedTensor<float64, shape=(30,)>
%2119 = 4                                       # ClearScalar<uint3>
%2120 = floor_divide(%2118, %2119)              # EncryptedTensor<float64, shape=(30,)>
%2121 = astype(%2120, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2122 = subtract(%2115, %2121)                  # EncryptedTensor<uint1, shape=(30,)>
%2123 = sum(%2122)                              # EncryptedScalar<uint5>
%2124 = negative(%2123)                         # EncryptedScalar<int1>
%2125 = 2                                       # ClearScalar<uint2>
%2126 = power(%2, %2125)                        # EncryptedScalar<uint1>
%2127 = true_divide(%2124, %2126)               # EncryptedScalar<float64>
%2128 = exp(%2127)                              # EncryptedScalar<float64>
%2129 = %0[8]                                   # EncryptedTensor<float64, shape=(30,)>
%2130 = %3[5]                                   # EncryptedTensor<float64, shape=(30,)>
%2131 = subtract(%2129, %2130)                  # EncryptedTensor<float64, shape=(30,)>
%2132 = %0[8]                                   # EncryptedTensor<float64, shape=(30,)>
%2133 = %3[5]                                   # EncryptedTensor<float64, shape=(30,)>
%2134 = subtract(%2132, %2133)                  # EncryptedTensor<float64, shape=(30,)>
%2135 = add(%2131, %2134)                       # EncryptedTensor<float64, shape=(30,)>
%2136 = 2                                       # ClearScalar<uint2>
%2137 = power(%2135, %2136)                     # EncryptedTensor<float64, shape=(30,)>
%2138 = 4                                       # ClearScalar<uint3>
%2139 = floor_divide(%2137, %2138)              # EncryptedTensor<float64, shape=(30,)>
%2140 = astype(%2139, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2141 = subtract(%2131, %2134)                  # EncryptedTensor<float64, shape=(30,)>
%2142 = 2                                       # ClearScalar<uint2>
%2143 = power(%2141, %2142)                     # EncryptedTensor<float64, shape=(30,)>
%2144 = 4                                       # ClearScalar<uint3>
%2145 = floor_divide(%2143, %2144)              # EncryptedTensor<float64, shape=(30,)>
%2146 = astype(%2145, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2147 = subtract(%2140, %2146)                  # EncryptedTensor<uint1, shape=(30,)>
%2148 = sum(%2147)                              # EncryptedScalar<uint5>
%2149 = negative(%2148)                         # EncryptedScalar<int1>
%2150 = 2                                       # ClearScalar<uint2>
%2151 = power(%2, %2150)                        # EncryptedScalar<uint1>
%2152 = true_divide(%2149, %2151)               # EncryptedScalar<float64>
%2153 = exp(%2152)                              # EncryptedScalar<float64>
%2154 = %0[8]                                   # EncryptedTensor<float64, shape=(30,)>
%2155 = %3[6]                                   # EncryptedTensor<float64, shape=(30,)>
%2156 = subtract(%2154, %2155)                  # EncryptedTensor<float64, shape=(30,)>
%2157 = %0[8]                                   # EncryptedTensor<float64, shape=(30,)>
%2158 = %3[6]                                   # EncryptedTensor<float64, shape=(30,)>
%2159 = subtract(%2157, %2158)                  # EncryptedTensor<float64, shape=(30,)>
%2160 = add(%2156, %2159)                       # EncryptedTensor<float64, shape=(30,)>
%2161 = 2                                       # ClearScalar<uint2>
%2162 = power(%2160, %2161)                     # EncryptedTensor<float64, shape=(30,)>
%2163 = 4                                       # ClearScalar<uint3>
%2164 = floor_divide(%2162, %2163)              # EncryptedTensor<float64, shape=(30,)>
%2165 = astype(%2164, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2166 = subtract(%2156, %2159)                  # EncryptedTensor<float64, shape=(30,)>
%2167 = 2                                       # ClearScalar<uint2>
%2168 = power(%2166, %2167)                     # EncryptedTensor<float64, shape=(30,)>
%2169 = 4                                       # ClearScalar<uint3>
%2170 = floor_divide(%2168, %2169)              # EncryptedTensor<float64, shape=(30,)>
%2171 = astype(%2170, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2172 = subtract(%2165, %2171)                  # EncryptedTensor<uint1, shape=(30,)>
%2173 = sum(%2172)                              # EncryptedScalar<uint5>
%2174 = negative(%2173)                         # EncryptedScalar<int1>
%2175 = 2                                       # ClearScalar<uint2>
%2176 = power(%2, %2175)                        # EncryptedScalar<uint1>
%2177 = true_divide(%2174, %2176)               # EncryptedScalar<float64>
%2178 = exp(%2177)                              # EncryptedScalar<float64>
%2179 = %0[8]                                   # EncryptedTensor<float64, shape=(30,)>
%2180 = %3[7]                                   # EncryptedTensor<float64, shape=(30,)>
%2181 = subtract(%2179, %2180)                  # EncryptedTensor<float64, shape=(30,)>
%2182 = %0[8]                                   # EncryptedTensor<float64, shape=(30,)>
%2183 = %3[7]                                   # EncryptedTensor<float64, shape=(30,)>
%2184 = subtract(%2182, %2183)                  # EncryptedTensor<float64, shape=(30,)>
%2185 = add(%2181, %2184)                       # EncryptedTensor<float64, shape=(30,)>
%2186 = 2                                       # ClearScalar<uint2>
%2187 = power(%2185, %2186)                     # EncryptedTensor<float64, shape=(30,)>
%2188 = 4                                       # ClearScalar<uint3>
%2189 = floor_divide(%2187, %2188)              # EncryptedTensor<float64, shape=(30,)>
%2190 = astype(%2189, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2191 = subtract(%2181, %2184)                  # EncryptedTensor<float64, shape=(30,)>
%2192 = 2                                       # ClearScalar<uint2>
%2193 = power(%2191, %2192)                     # EncryptedTensor<float64, shape=(30,)>
%2194 = 4                                       # ClearScalar<uint3>
%2195 = floor_divide(%2193, %2194)              # EncryptedTensor<float64, shape=(30,)>
%2196 = astype(%2195, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2197 = subtract(%2190, %2196)                  # EncryptedTensor<uint1, shape=(30,)>
%2198 = sum(%2197)                              # EncryptedScalar<uint5>
%2199 = negative(%2198)                         # EncryptedScalar<int1>
%2200 = 2                                       # ClearScalar<uint2>
%2201 = power(%2, %2200)                        # EncryptedScalar<uint1>
%2202 = true_divide(%2199, %2201)               # EncryptedScalar<float64>
%2203 = exp(%2202)                              # EncryptedScalar<float64>
%2204 = %0[8]                                   # EncryptedTensor<float64, shape=(30,)>
%2205 = %3[8]                                   # EncryptedTensor<float64, shape=(30,)>
%2206 = subtract(%2204, %2205)                  # EncryptedTensor<float64, shape=(30,)>
%2207 = %0[8]                                   # EncryptedTensor<float64, shape=(30,)>
%2208 = %3[8]                                   # EncryptedTensor<float64, shape=(30,)>
%2209 = subtract(%2207, %2208)                  # EncryptedTensor<float64, shape=(30,)>
%2210 = add(%2206, %2209)                       # EncryptedTensor<float64, shape=(30,)>
%2211 = 2                                       # ClearScalar<uint2>
%2212 = power(%2210, %2211)                     # EncryptedTensor<float64, shape=(30,)>
%2213 = 4                                       # ClearScalar<uint3>
%2214 = floor_divide(%2212, %2213)              # EncryptedTensor<float64, shape=(30,)>
%2215 = astype(%2214, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2216 = subtract(%2206, %2209)                  # EncryptedTensor<float64, shape=(30,)>
%2217 = 2                                       # ClearScalar<uint2>
%2218 = power(%2216, %2217)                     # EncryptedTensor<float64, shape=(30,)>
%2219 = 4                                       # ClearScalar<uint3>
%2220 = floor_divide(%2218, %2219)              # EncryptedTensor<float64, shape=(30,)>
%2221 = astype(%2220, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2222 = subtract(%2215, %2221)                  # EncryptedTensor<uint1, shape=(30,)>
%2223 = sum(%2222)                              # EncryptedScalar<uint5>
%2224 = negative(%2223)                         # EncryptedScalar<int1>
%2225 = 2                                       # ClearScalar<uint2>
%2226 = power(%2, %2225)                        # EncryptedScalar<uint1>
%2227 = true_divide(%2224, %2226)               # EncryptedScalar<float64>
%2228 = exp(%2227)                              # EncryptedScalar<float64>
%2229 = %0[8]                                   # EncryptedTensor<float64, shape=(30,)>
%2230 = %3[9]                                   # EncryptedTensor<float64, shape=(30,)>
%2231 = subtract(%2229, %2230)                  # EncryptedTensor<float64, shape=(30,)>
%2232 = %0[8]                                   # EncryptedTensor<float64, shape=(30,)>
%2233 = %3[9]                                   # EncryptedTensor<float64, shape=(30,)>
%2234 = subtract(%2232, %2233)                  # EncryptedTensor<float64, shape=(30,)>
%2235 = add(%2231, %2234)                       # EncryptedTensor<float64, shape=(30,)>
%2236 = 2                                       # ClearScalar<uint2>
%2237 = power(%2235, %2236)                     # EncryptedTensor<float64, shape=(30,)>
%2238 = 4                                       # ClearScalar<uint3>
%2239 = floor_divide(%2237, %2238)              # EncryptedTensor<float64, shape=(30,)>
%2240 = astype(%2239, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2241 = subtract(%2231, %2234)                  # EncryptedTensor<float64, shape=(30,)>
%2242 = 2                                       # ClearScalar<uint2>
%2243 = power(%2241, %2242)                     # EncryptedTensor<float64, shape=(30,)>
%2244 = 4                                       # ClearScalar<uint3>
%2245 = floor_divide(%2243, %2244)              # EncryptedTensor<float64, shape=(30,)>
%2246 = astype(%2245, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2247 = subtract(%2240, %2246)                  # EncryptedTensor<uint1, shape=(30,)>
%2248 = sum(%2247)                              # EncryptedScalar<uint5>
%2249 = negative(%2248)                         # EncryptedScalar<int1>
%2250 = 2                                       # ClearScalar<uint2>
%2251 = power(%2, %2250)                        # EncryptedScalar<uint1>
%2252 = true_divide(%2249, %2251)               # EncryptedScalar<float64>
%2253 = exp(%2252)                              # EncryptedScalar<float64>
%2254 = %0[9]                                   # EncryptedTensor<float64, shape=(30,)>
%2255 = %3[0]                                   # EncryptedTensor<float64, shape=(30,)>
%2256 = subtract(%2254, %2255)                  # EncryptedTensor<float64, shape=(30,)>
%2257 = %0[9]                                   # EncryptedTensor<float64, shape=(30,)>
%2258 = %3[0]                                   # EncryptedTensor<float64, shape=(30,)>
%2259 = subtract(%2257, %2258)                  # EncryptedTensor<float64, shape=(30,)>
%2260 = add(%2256, %2259)                       # EncryptedTensor<float64, shape=(30,)>
%2261 = 2                                       # ClearScalar<uint2>
%2262 = power(%2260, %2261)                     # EncryptedTensor<float64, shape=(30,)>
%2263 = 4                                       # ClearScalar<uint3>
%2264 = floor_divide(%2262, %2263)              # EncryptedTensor<float64, shape=(30,)>
%2265 = astype(%2264, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2266 = subtract(%2256, %2259)                  # EncryptedTensor<float64, shape=(30,)>
%2267 = 2                                       # ClearScalar<uint2>
%2268 = power(%2266, %2267)                     # EncryptedTensor<float64, shape=(30,)>
%2269 = 4                                       # ClearScalar<uint3>
%2270 = floor_divide(%2268, %2269)              # EncryptedTensor<float64, shape=(30,)>
%2271 = astype(%2270, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2272 = subtract(%2265, %2271)                  # EncryptedTensor<uint1, shape=(30,)>
%2273 = sum(%2272)                              # EncryptedScalar<uint5>
%2274 = negative(%2273)                         # EncryptedScalar<int1>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this is one of the input nodes
                                                                        fhe_krr.py:53
%2275 = 2                                       # ClearScalar<uint2>
%2276 = power(%2, %2275)                        # EncryptedScalar<uint1>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this is one of the input nodes
                                                                         fhe_krr.py:53
%2277 = true_divide(%2274, %2276)               # EncryptedScalar<float64>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ within this subgraph
                                                                           fhe_krr.py:53
%2278 = exp(%2277)                              # EncryptedScalar<float64>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ within this subgraph
                                                                           fhe_krr.py:53
%2279 = %0[9]                                   # EncryptedTensor<float64, shape=(30,)>
%2280 = %3[1]                                   # EncryptedTensor<float64, shape=(30,)>
%2281 = subtract(%2279, %2280)                  # EncryptedTensor<float64, shape=(30,)>
%2282 = %0[9]                                   # EncryptedTensor<float64, shape=(30,)>
%2283 = %3[1]                                   # EncryptedTensor<float64, shape=(30,)>
%2284 = subtract(%2282, %2283)                  # EncryptedTensor<float64, shape=(30,)>
%2285 = add(%2281, %2284)                       # EncryptedTensor<float64, shape=(30,)>
%2286 = 2                                       # ClearScalar<uint2>
%2287 = power(%2285, %2286)                     # EncryptedTensor<float64, shape=(30,)>
%2288 = 4                                       # ClearScalar<uint3>
%2289 = floor_divide(%2287, %2288)              # EncryptedTensor<float64, shape=(30,)>
%2290 = astype(%2289, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2291 = subtract(%2281, %2284)                  # EncryptedTensor<float64, shape=(30,)>
%2292 = 2                                       # ClearScalar<uint2>
%2293 = power(%2291, %2292)                     # EncryptedTensor<float64, shape=(30,)>
%2294 = 4                                       # ClearScalar<uint3>
%2295 = floor_divide(%2293, %2294)              # EncryptedTensor<float64, shape=(30,)>
%2296 = astype(%2295, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2297 = subtract(%2290, %2296)                  # EncryptedTensor<uint1, shape=(30,)>
%2298 = sum(%2297)                              # EncryptedScalar<uint5>
%2299 = negative(%2298)                         # EncryptedScalar<int1>
%2300 = 2                                       # ClearScalar<uint2>
%2301 = power(%2, %2300)                        # EncryptedScalar<uint1>
%2302 = true_divide(%2299, %2301)               # EncryptedScalar<float64>
%2303 = exp(%2302)                              # EncryptedScalar<float64>
%2304 = %0[9]                                   # EncryptedTensor<float64, shape=(30,)>
%2305 = %3[2]                                   # EncryptedTensor<float64, shape=(30,)>
%2306 = subtract(%2304, %2305)                  # EncryptedTensor<float64, shape=(30,)>
%2307 = %0[9]                                   # EncryptedTensor<float64, shape=(30,)>
%2308 = %3[2]                                   # EncryptedTensor<float64, shape=(30,)>
%2309 = subtract(%2307, %2308)                  # EncryptedTensor<float64, shape=(30,)>
%2310 = add(%2306, %2309)                       # EncryptedTensor<float64, shape=(30,)>
%2311 = 2                                       # ClearScalar<uint2>
%2312 = power(%2310, %2311)                     # EncryptedTensor<float64, shape=(30,)>
%2313 = 4                                       # ClearScalar<uint3>
%2314 = floor_divide(%2312, %2313)              # EncryptedTensor<float64, shape=(30,)>
%2315 = astype(%2314, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2316 = subtract(%2306, %2309)                  # EncryptedTensor<float64, shape=(30,)>
%2317 = 2                                       # ClearScalar<uint2>
%2318 = power(%2316, %2317)                     # EncryptedTensor<float64, shape=(30,)>
%2319 = 4                                       # ClearScalar<uint3>
%2320 = floor_divide(%2318, %2319)              # EncryptedTensor<float64, shape=(30,)>
%2321 = astype(%2320, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2322 = subtract(%2315, %2321)                  # EncryptedTensor<uint1, shape=(30,)>
%2323 = sum(%2322)                              # EncryptedScalar<uint5>
%2324 = negative(%2323)                         # EncryptedScalar<int1>
%2325 = 2                                       # ClearScalar<uint2>
%2326 = power(%2, %2325)                        # EncryptedScalar<uint1>
%2327 = true_divide(%2324, %2326)               # EncryptedScalar<float64>
%2328 = exp(%2327)                              # EncryptedScalar<float64>
%2329 = %0[9]                                   # EncryptedTensor<float64, shape=(30,)>
%2330 = %3[3]                                   # EncryptedTensor<float64, shape=(30,)>
%2331 = subtract(%2329, %2330)                  # EncryptedTensor<float64, shape=(30,)>
%2332 = %0[9]                                   # EncryptedTensor<float64, shape=(30,)>
%2333 = %3[3]                                   # EncryptedTensor<float64, shape=(30,)>
%2334 = subtract(%2332, %2333)                  # EncryptedTensor<float64, shape=(30,)>
%2335 = add(%2331, %2334)                       # EncryptedTensor<float64, shape=(30,)>
%2336 = 2                                       # ClearScalar<uint2>
%2337 = power(%2335, %2336)                     # EncryptedTensor<float64, shape=(30,)>
%2338 = 4                                       # ClearScalar<uint3>
%2339 = floor_divide(%2337, %2338)              # EncryptedTensor<float64, shape=(30,)>
%2340 = astype(%2339, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2341 = subtract(%2331, %2334)                  # EncryptedTensor<float64, shape=(30,)>
%2342 = 2                                       # ClearScalar<uint2>
%2343 = power(%2341, %2342)                     # EncryptedTensor<float64, shape=(30,)>
%2344 = 4                                       # ClearScalar<uint3>
%2345 = floor_divide(%2343, %2344)              # EncryptedTensor<float64, shape=(30,)>
%2346 = astype(%2345, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2347 = subtract(%2340, %2346)                  # EncryptedTensor<uint1, shape=(30,)>
%2348 = sum(%2347)                              # EncryptedScalar<uint5>
%2349 = negative(%2348)                         # EncryptedScalar<int1>
%2350 = 2                                       # ClearScalar<uint2>
%2351 = power(%2, %2350)                        # EncryptedScalar<uint1>
%2352 = true_divide(%2349, %2351)               # EncryptedScalar<float64>
%2353 = exp(%2352)                              # EncryptedScalar<float64>
%2354 = %0[9]                                   # EncryptedTensor<float64, shape=(30,)>
%2355 = %3[4]                                   # EncryptedTensor<float64, shape=(30,)>
%2356 = subtract(%2354, %2355)                  # EncryptedTensor<float64, shape=(30,)>
%2357 = %0[9]                                   # EncryptedTensor<float64, shape=(30,)>
%2358 = %3[4]                                   # EncryptedTensor<float64, shape=(30,)>
%2359 = subtract(%2357, %2358)                  # EncryptedTensor<float64, shape=(30,)>
%2360 = add(%2356, %2359)                       # EncryptedTensor<float64, shape=(30,)>
%2361 = 2                                       # ClearScalar<uint2>
%2362 = power(%2360, %2361)                     # EncryptedTensor<float64, shape=(30,)>
%2363 = 4                                       # ClearScalar<uint3>
%2364 = floor_divide(%2362, %2363)              # EncryptedTensor<float64, shape=(30,)>
%2365 = astype(%2364, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2366 = subtract(%2356, %2359)                  # EncryptedTensor<float64, shape=(30,)>
%2367 = 2                                       # ClearScalar<uint2>
%2368 = power(%2366, %2367)                     # EncryptedTensor<float64, shape=(30,)>
%2369 = 4                                       # ClearScalar<uint3>
%2370 = floor_divide(%2368, %2369)              # EncryptedTensor<float64, shape=(30,)>
%2371 = astype(%2370, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2372 = subtract(%2365, %2371)                  # EncryptedTensor<uint1, shape=(30,)>
%2373 = sum(%2372)                              # EncryptedScalar<uint5>
%2374 = negative(%2373)                         # EncryptedScalar<int1>
%2375 = 2                                       # ClearScalar<uint2>
%2376 = power(%2, %2375)                        # EncryptedScalar<uint1>
%2377 = true_divide(%2374, %2376)               # EncryptedScalar<float64>
%2378 = exp(%2377)                              # EncryptedScalar<float64>
%2379 = %0[9]                                   # EncryptedTensor<float64, shape=(30,)>
%2380 = %3[5]                                   # EncryptedTensor<float64, shape=(30,)>
%2381 = subtract(%2379, %2380)                  # EncryptedTensor<float64, shape=(30,)>
%2382 = %0[9]                                   # EncryptedTensor<float64, shape=(30,)>
%2383 = %3[5]                                   # EncryptedTensor<float64, shape=(30,)>
%2384 = subtract(%2382, %2383)                  # EncryptedTensor<float64, shape=(30,)>
%2385 = add(%2381, %2384)                       # EncryptedTensor<float64, shape=(30,)>
%2386 = 2                                       # ClearScalar<uint2>
%2387 = power(%2385, %2386)                     # EncryptedTensor<float64, shape=(30,)>
%2388 = 4                                       # ClearScalar<uint3>
%2389 = floor_divide(%2387, %2388)              # EncryptedTensor<float64, shape=(30,)>
%2390 = astype(%2389, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2391 = subtract(%2381, %2384)                  # EncryptedTensor<float64, shape=(30,)>
%2392 = 2                                       # ClearScalar<uint2>
%2393 = power(%2391, %2392)                     # EncryptedTensor<float64, shape=(30,)>
%2394 = 4                                       # ClearScalar<uint3>
%2395 = floor_divide(%2393, %2394)              # EncryptedTensor<float64, shape=(30,)>
%2396 = astype(%2395, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2397 = subtract(%2390, %2396)                  # EncryptedTensor<uint1, shape=(30,)>
%2398 = sum(%2397)                              # EncryptedScalar<uint5>
%2399 = negative(%2398)                         # EncryptedScalar<int1>
%2400 = 2                                       # ClearScalar<uint2>
%2401 = power(%2, %2400)                        # EncryptedScalar<uint1>
%2402 = true_divide(%2399, %2401)               # EncryptedScalar<float64>
%2403 = exp(%2402)                              # EncryptedScalar<float64>
%2404 = %0[9]                                   # EncryptedTensor<float64, shape=(30,)>
%2405 = %3[6]                                   # EncryptedTensor<float64, shape=(30,)>
%2406 = subtract(%2404, %2405)                  # EncryptedTensor<float64, shape=(30,)>
%2407 = %0[9]                                   # EncryptedTensor<float64, shape=(30,)>
%2408 = %3[6]                                   # EncryptedTensor<float64, shape=(30,)>
%2409 = subtract(%2407, %2408)                  # EncryptedTensor<float64, shape=(30,)>
%2410 = add(%2406, %2409)                       # EncryptedTensor<float64, shape=(30,)>
%2411 = 2                                       # ClearScalar<uint2>
%2412 = power(%2410, %2411)                     # EncryptedTensor<float64, shape=(30,)>
%2413 = 4                                       # ClearScalar<uint3>
%2414 = floor_divide(%2412, %2413)              # EncryptedTensor<float64, shape=(30,)>
%2415 = astype(%2414, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2416 = subtract(%2406, %2409)                  # EncryptedTensor<float64, shape=(30,)>
%2417 = 2                                       # ClearScalar<uint2>
%2418 = power(%2416, %2417)                     # EncryptedTensor<float64, shape=(30,)>
%2419 = 4                                       # ClearScalar<uint3>
%2420 = floor_divide(%2418, %2419)              # EncryptedTensor<float64, shape=(30,)>
%2421 = astype(%2420, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2422 = subtract(%2415, %2421)                  # EncryptedTensor<uint1, shape=(30,)>
%2423 = sum(%2422)                              # EncryptedScalar<uint5>
%2424 = negative(%2423)                         # EncryptedScalar<int1>
%2425 = 2                                       # ClearScalar<uint2>
%2426 = power(%2, %2425)                        # EncryptedScalar<uint1>
%2427 = true_divide(%2424, %2426)               # EncryptedScalar<float64>
%2428 = exp(%2427)                              # EncryptedScalar<float64>
%2429 = %0[9]                                   # EncryptedTensor<float64, shape=(30,)>
%2430 = %3[7]                                   # EncryptedTensor<float64, shape=(30,)>
%2431 = subtract(%2429, %2430)                  # EncryptedTensor<float64, shape=(30,)>
%2432 = %0[9]                                   # EncryptedTensor<float64, shape=(30,)>
%2433 = %3[7]                                   # EncryptedTensor<float64, shape=(30,)>
%2434 = subtract(%2432, %2433)                  # EncryptedTensor<float64, shape=(30,)>
%2435 = add(%2431, %2434)                       # EncryptedTensor<float64, shape=(30,)>
%2436 = 2                                       # ClearScalar<uint2>
%2437 = power(%2435, %2436)                     # EncryptedTensor<float64, shape=(30,)>
%2438 = 4                                       # ClearScalar<uint3>
%2439 = floor_divide(%2437, %2438)              # EncryptedTensor<float64, shape=(30,)>
%2440 = astype(%2439, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2441 = subtract(%2431, %2434)                  # EncryptedTensor<float64, shape=(30,)>
%2442 = 2                                       # ClearScalar<uint2>
%2443 = power(%2441, %2442)                     # EncryptedTensor<float64, shape=(30,)>
%2444 = 4                                       # ClearScalar<uint3>
%2445 = floor_divide(%2443, %2444)              # EncryptedTensor<float64, shape=(30,)>
%2446 = astype(%2445, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2447 = subtract(%2440, %2446)                  # EncryptedTensor<uint1, shape=(30,)>
%2448 = sum(%2447)                              # EncryptedScalar<uint5>
%2449 = negative(%2448)                         # EncryptedScalar<int1>
%2450 = 2                                       # ClearScalar<uint2>
%2451 = power(%2, %2450)                        # EncryptedScalar<uint1>
%2452 = true_divide(%2449, %2451)               # EncryptedScalar<float64>
%2453 = exp(%2452)                              # EncryptedScalar<float64>
%2454 = %0[9]                                   # EncryptedTensor<float64, shape=(30,)>
%2455 = %3[8]                                   # EncryptedTensor<float64, shape=(30,)>
%2456 = subtract(%2454, %2455)                  # EncryptedTensor<float64, shape=(30,)>
%2457 = %0[9]                                   # EncryptedTensor<float64, shape=(30,)>
%2458 = %3[8]                                   # EncryptedTensor<float64, shape=(30,)>
%2459 = subtract(%2457, %2458)                  # EncryptedTensor<float64, shape=(30,)>
%2460 = add(%2456, %2459)                       # EncryptedTensor<float64, shape=(30,)>
%2461 = 2                                       # ClearScalar<uint2>
%2462 = power(%2460, %2461)                     # EncryptedTensor<float64, shape=(30,)>
%2463 = 4                                       # ClearScalar<uint3>
%2464 = floor_divide(%2462, %2463)              # EncryptedTensor<float64, shape=(30,)>
%2465 = astype(%2464, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2466 = subtract(%2456, %2459)                  # EncryptedTensor<float64, shape=(30,)>
%2467 = 2                                       # ClearScalar<uint2>
%2468 = power(%2466, %2467)                     # EncryptedTensor<float64, shape=(30,)>
%2469 = 4                                       # ClearScalar<uint3>
%2470 = floor_divide(%2468, %2469)              # EncryptedTensor<float64, shape=(30,)>
%2471 = astype(%2470, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2472 = subtract(%2465, %2471)                  # EncryptedTensor<uint1, shape=(30,)>
%2473 = sum(%2472)                              # EncryptedScalar<uint5>
%2474 = negative(%2473)                         # EncryptedScalar<int1>
%2475 = 2                                       # ClearScalar<uint2>
%2476 = power(%2, %2475)                        # EncryptedScalar<uint1>
%2477 = true_divide(%2474, %2476)               # EncryptedScalar<float64>
%2478 = exp(%2477)                              # EncryptedScalar<float64>
%2479 = %0[9]                                   # EncryptedTensor<float64, shape=(30,)>
%2480 = %3[9]                                   # EncryptedTensor<float64, shape=(30,)>
%2481 = subtract(%2479, %2480)                  # EncryptedTensor<float64, shape=(30,)>
%2482 = %0[9]                                   # EncryptedTensor<float64, shape=(30,)>
%2483 = %3[9]                                   # EncryptedTensor<float64, shape=(30,)>
%2484 = subtract(%2482, %2483)                  # EncryptedTensor<float64, shape=(30,)>
%2485 = add(%2481, %2484)                       # EncryptedTensor<float64, shape=(30,)>
%2486 = 2                                       # ClearScalar<uint2>
%2487 = power(%2485, %2486)                     # EncryptedTensor<float64, shape=(30,)>
%2488 = 4                                       # ClearScalar<uint3>
%2489 = floor_divide(%2487, %2488)              # EncryptedTensor<float64, shape=(30,)>
%2490 = astype(%2489, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2491 = subtract(%2481, %2484)                  # EncryptedTensor<float64, shape=(30,)>
%2492 = 2                                       # ClearScalar<uint2>
%2493 = power(%2491, %2492)                     # EncryptedTensor<float64, shape=(30,)>
%2494 = 4                                       # ClearScalar<uint3>
%2495 = floor_divide(%2493, %2494)              # EncryptedTensor<float64, shape=(30,)>
%2496 = astype(%2495, dtype=int_)               # EncryptedTensor<uint1, shape=(30,)>
%2497 = subtract(%2490, %2496)                  # EncryptedTensor<uint1, shape=(30,)>
%2498 = sum(%2497)                              # EncryptedScalar<uint5>
%2499 = negative(%2498)                         # EncryptedScalar<int1>
%2500 = 2                                       # ClearScalar<uint2>
%2501 = power(%2, %2500)                        # EncryptedScalar<uint1>
%2502 = true_divide(%2499, %2501)               # EncryptedScalar<float64>
%2503 = exp(%2502)                              # EncryptedScalar<float64>
%2504 = zeros()                                 # EncryptedScalar<uint1>
%2505 = %1[0]                                   # EncryptedScalar<uint1>
%2506 = multiply(%28, %2505)                    # EncryptedScalar<float64>
%2507 = astype(%2506, dtype=int_)               # EncryptedScalar<uint1>
%2508 = add(%2504, %2507)                       # EncryptedScalar<uint2>
%2509 = %1[1]                                   # EncryptedScalar<uint1>
%2510 = multiply(%278, %2509)                   # EncryptedScalar<float64>
%2511 = astype(%2510, dtype=int_)               # EncryptedScalar<uint1>
%2512 = add(%2508, %2511)                       # EncryptedScalar<uint2>
%2513 = %1[2]                                   # EncryptedScalar<uint1>
%2514 = multiply(%528, %2513)                   # EncryptedScalar<float64>
%2515 = astype(%2514, dtype=int_)               # EncryptedScalar<uint1>
%2516 = add(%2512, %2515)                       # EncryptedScalar<uint2>
%2517 = %1[3]                                   # EncryptedScalar<uint1>
%2518 = multiply(%778, %2517)                   # EncryptedScalar<float64>
%2519 = astype(%2518, dtype=int_)               # EncryptedScalar<uint1>
%2520 = add(%2516, %2519)                       # EncryptedScalar<uint2>
%2521 = %1[4]                                   # EncryptedScalar<uint1>
%2522 = multiply(%1028, %2521)                  # EncryptedScalar<float64>
%2523 = astype(%2522, dtype=int_)               # EncryptedScalar<uint1>
%2524 = add(%2520, %2523)                       # EncryptedScalar<uint2>
%2525 = %1[5]                                   # EncryptedScalar<uint1>
%2526 = multiply(%1278, %2525)                  # EncryptedScalar<float64>
%2527 = astype(%2526, dtype=int_)               # EncryptedScalar<uint1>
%2528 = add(%2524, %2527)                       # EncryptedScalar<uint2>
%2529 = %1[6]                                   # EncryptedScalar<uint1>
%2530 = multiply(%1528, %2529)                  # EncryptedScalar<float64>
%2531 = astype(%2530, dtype=int_)               # EncryptedScalar<uint1>
%2532 = add(%2528, %2531)                       # EncryptedScalar<uint2>
%2533 = %1[7]                                   # EncryptedScalar<uint1>
%2534 = multiply(%1778, %2533)                  # EncryptedScalar<float64>
%2535 = astype(%2534, dtype=int_)               # EncryptedScalar<uint1>
%2536 = add(%2532, %2535)                       # EncryptedScalar<uint2>
%2537 = %1[8]                                   # EncryptedScalar<uint1>
%2538 = multiply(%2028, %2537)                  # EncryptedScalar<float64>
%2539 = astype(%2538, dtype=int_)               # EncryptedScalar<uint1>
%2540 = add(%2536, %2539)                       # EncryptedScalar<uint2>
%2541 = %1[9]                                   # EncryptedScalar<uint1>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this is one of the input nodes
                                                                         fhe_krr.py:72
%2542 = multiply(%2278, %2541)                  # EncryptedScalar<float64>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ within this subgraph
                                                                           fhe_krr.py:73
%2543 = astype(%2542, dtype=int_)               # EncryptedScalar<uint1>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ within this subgraph
                                                                         fhe_krr.py:73
%2544 = add(%2540, %2543)                       # EncryptedScalar<uint2>
%2545 = zeros()                                 # EncryptedScalar<uint1>
%2546 = %1[0]                                   # EncryptedScalar<uint1>
%2547 = multiply(%53, %2546)                    # EncryptedScalar<float64>
%2548 = astype(%2547, dtype=int_)               # EncryptedScalar<uint1>
%2549 = add(%2545, %2548)                       # EncryptedScalar<uint2>
%2550 = %1[1]                                   # EncryptedScalar<uint1>
%2551 = multiply(%303, %2550)                   # EncryptedScalar<float64>
%2552 = astype(%2551, dtype=int_)               # EncryptedScalar<uint1>
%2553 = add(%2549, %2552)                       # EncryptedScalar<uint2>
%2554 = %1[2]                                   # EncryptedScalar<uint1>
%2555 = multiply(%553, %2554)                   # EncryptedScalar<float64>
%2556 = astype(%2555, dtype=int_)               # EncryptedScalar<uint1>
%2557 = add(%2553, %2556)                       # EncryptedScalar<uint2>
%2558 = %1[3]                                   # EncryptedScalar<uint1>
%2559 = multiply(%803, %2558)                   # EncryptedScalar<float64>
%2560 = astype(%2559, dtype=int_)               # EncryptedScalar<uint1>
%2561 = add(%2557, %2560)                       # EncryptedScalar<uint2>
%2562 = %1[4]                                   # EncryptedScalar<uint1>
%2563 = multiply(%1053, %2562)                  # EncryptedScalar<float64>
%2564 = astype(%2563, dtype=int_)               # EncryptedScalar<uint1>
%2565 = add(%2561, %2564)                       # EncryptedScalar<uint2>
%2566 = %1[5]                                   # EncryptedScalar<uint1>
%2567 = multiply(%1303, %2566)                  # EncryptedScalar<float64>
%2568 = astype(%2567, dtype=int_)               # EncryptedScalar<uint1>
%2569 = add(%2565, %2568)                       # EncryptedScalar<uint2>
%2570 = %1[6]                                   # EncryptedScalar<uint1>
%2571 = multiply(%1553, %2570)                  # EncryptedScalar<float64>
%2572 = astype(%2571, dtype=int_)               # EncryptedScalar<uint1>
%2573 = add(%2569, %2572)                       # EncryptedScalar<uint2>
%2574 = %1[7]                                   # EncryptedScalar<uint1>
%2575 = multiply(%1803, %2574)                  # EncryptedScalar<float64>
%2576 = astype(%2575, dtype=int_)               # EncryptedScalar<uint1>
%2577 = add(%2573, %2576)                       # EncryptedScalar<uint2>
%2578 = %1[8]                                   # EncryptedScalar<uint1>
%2579 = multiply(%2053, %2578)                  # EncryptedScalar<float64>
%2580 = astype(%2579, dtype=int_)               # EncryptedScalar<uint1>
%2581 = add(%2577, %2580)                       # EncryptedScalar<uint2>
%2582 = %1[9]                                   # EncryptedScalar<uint1>
%2583 = multiply(%2303, %2582)                  # EncryptedScalar<float64>
%2584 = astype(%2583, dtype=int_)               # EncryptedScalar<uint1>
%2585 = add(%2581, %2584)                       # EncryptedScalar<uint2>
%2586 = zeros()                                 # EncryptedScalar<uint1>
%2587 = %1[0]                                   # EncryptedScalar<uint1>
%2588 = multiply(%78, %2587)                    # EncryptedScalar<float64>
%2589 = astype(%2588, dtype=int_)               # EncryptedScalar<uint1>
%2590 = add(%2586, %2589)                       # EncryptedScalar<uint2>
%2591 = %1[1]                                   # EncryptedScalar<uint1>
%2592 = multiply(%328, %2591)                   # EncryptedScalar<float64>
%2593 = astype(%2592, dtype=int_)               # EncryptedScalar<uint1>
%2594 = add(%2590, %2593)                       # EncryptedScalar<uint2>
%2595 = %1[2]                                   # EncryptedScalar<uint1>
%2596 = multiply(%578, %2595)                   # EncryptedScalar<float64>
%2597 = astype(%2596, dtype=int_)               # EncryptedScalar<uint1>
%2598 = add(%2594, %2597)                       # EncryptedScalar<uint2>
%2599 = %1[3]                                   # EncryptedScalar<uint1>
%2600 = multiply(%828, %2599)                   # EncryptedScalar<float64>
%2601 = astype(%2600, dtype=int_)               # EncryptedScalar<uint1>
%2602 = add(%2598, %2601)                       # EncryptedScalar<uint2>
%2603 = %1[4]                                   # EncryptedScalar<uint1>
%2604 = multiply(%1078, %2603)                  # EncryptedScalar<float64>
%2605 = astype(%2604, dtype=int_)               # EncryptedScalar<uint1>
%2606 = add(%2602, %2605)                       # EncryptedScalar<uint2>
%2607 = %1[5]                                   # EncryptedScalar<uint1>
%2608 = multiply(%1328, %2607)                  # EncryptedScalar<float64>
%2609 = astype(%2608, dtype=int_)               # EncryptedScalar<uint1>
%2610 = add(%2606, %2609)                       # EncryptedScalar<uint2>
%2611 = %1[6]                                   # EncryptedScalar<uint1>
%2612 = multiply(%1578, %2611)                  # EncryptedScalar<float64>
%2613 = astype(%2612, dtype=int_)               # EncryptedScalar<uint1>
%2614 = add(%2610, %2613)                       # EncryptedScalar<uint2>
%2615 = %1[7]                                   # EncryptedScalar<uint1>
%2616 = multiply(%1828, %2615)                  # EncryptedScalar<float64>
%2617 = astype(%2616, dtype=int_)               # EncryptedScalar<uint1>
%2618 = add(%2614, %2617)                       # EncryptedScalar<uint2>
%2619 = %1[8]                                   # EncryptedScalar<uint1>
%2620 = multiply(%2078, %2619)                  # EncryptedScalar<float64>
%2621 = astype(%2620, dtype=int_)               # EncryptedScalar<uint1>
%2622 = add(%2618, %2621)                       # EncryptedScalar<uint2>
%2623 = %1[9]                                   # EncryptedScalar<uint1>
%2624 = multiply(%2328, %2623)                  # EncryptedScalar<float64>
%2625 = astype(%2624, dtype=int_)               # EncryptedScalar<uint1>
%2626 = add(%2622, %2625)                       # EncryptedScalar<uint2>
%2627 = zeros()                                 # EncryptedScalar<uint1>
%2628 = %1[0]                                   # EncryptedScalar<uint1>
%2629 = multiply(%103, %2628)                   # EncryptedScalar<float64>
%2630 = astype(%2629, dtype=int_)               # EncryptedScalar<uint1>
%2631 = add(%2627, %2630)                       # EncryptedScalar<uint2>
%2632 = %1[1]                                   # EncryptedScalar<uint1>
%2633 = multiply(%353, %2632)                   # EncryptedScalar<float64>
%2634 = astype(%2633, dtype=int_)               # EncryptedScalar<uint1>
%2635 = add(%2631, %2634)                       # EncryptedScalar<uint2>
%2636 = %1[2]                                   # EncryptedScalar<uint1>
%2637 = multiply(%603, %2636)                   # EncryptedScalar<float64>
%2638 = astype(%2637, dtype=int_)               # EncryptedScalar<uint1>
%2639 = add(%2635, %2638)                       # EncryptedScalar<uint2>
%2640 = %1[3]                                   # EncryptedScalar<uint1>
%2641 = multiply(%853, %2640)                   # EncryptedScalar<float64>
%2642 = astype(%2641, dtype=int_)               # EncryptedScalar<uint1>
%2643 = add(%2639, %2642)                       # EncryptedScalar<uint2>
%2644 = %1[4]                                   # EncryptedScalar<uint1>
%2645 = multiply(%1103, %2644)                  # EncryptedScalar<float64>
%2646 = astype(%2645, dtype=int_)               # EncryptedScalar<uint1>
%2647 = add(%2643, %2646)                       # EncryptedScalar<uint2>
%2648 = %1[5]                                   # EncryptedScalar<uint1>
%2649 = multiply(%1353, %2648)                  # EncryptedScalar<float64>
%2650 = astype(%2649, dtype=int_)               # EncryptedScalar<uint1>
%2651 = add(%2647, %2650)                       # EncryptedScalar<uint2>
%2652 = %1[6]                                   # EncryptedScalar<uint1>
%2653 = multiply(%1603, %2652)                  # EncryptedScalar<float64>
%2654 = astype(%2653, dtype=int_)               # EncryptedScalar<uint1>
%2655 = add(%2651, %2654)                       # EncryptedScalar<uint2>
%2656 = %1[7]                                   # EncryptedScalar<uint1>
%2657 = multiply(%1853, %2656)                  # EncryptedScalar<float64>
%2658 = astype(%2657, dtype=int_)               # EncryptedScalar<uint1>
%2659 = add(%2655, %2658)                       # EncryptedScalar<uint2>
%2660 = %1[8]                                   # EncryptedScalar<uint1>
%2661 = multiply(%2103, %2660)                  # EncryptedScalar<float64>
%2662 = astype(%2661, dtype=int_)               # EncryptedScalar<uint1>
%2663 = add(%2659, %2662)                       # EncryptedScalar<uint2>
%2664 = %1[9]                                   # EncryptedScalar<uint1>
%2665 = multiply(%2353, %2664)                  # EncryptedScalar<float64>
%2666 = astype(%2665, dtype=int_)               # EncryptedScalar<uint1>
%2667 = add(%2663, %2666)                       # EncryptedScalar<uint2>
%2668 = zeros()                                 # EncryptedScalar<uint1>
%2669 = %1[0]                                   # EncryptedScalar<uint1>
%2670 = multiply(%128, %2669)                   # EncryptedScalar<float64>
%2671 = astype(%2670, dtype=int_)               # EncryptedScalar<uint1>
%2672 = add(%2668, %2671)                       # EncryptedScalar<uint2>
%2673 = %1[1]                                   # EncryptedScalar<uint1>
%2674 = multiply(%378, %2673)                   # EncryptedScalar<float64>
%2675 = astype(%2674, dtype=int_)               # EncryptedScalar<uint1>
%2676 = add(%2672, %2675)                       # EncryptedScalar<uint2>
%2677 = %1[2]                                   # EncryptedScalar<uint1>
%2678 = multiply(%628, %2677)                   # EncryptedScalar<float64>
%2679 = astype(%2678, dtype=int_)               # EncryptedScalar<uint1>
%2680 = add(%2676, %2679)                       # EncryptedScalar<uint2>
%2681 = %1[3]                                   # EncryptedScalar<uint1>
%2682 = multiply(%878, %2681)                   # EncryptedScalar<float64>
%2683 = astype(%2682, dtype=int_)               # EncryptedScalar<uint1>
%2684 = add(%2680, %2683)                       # EncryptedScalar<uint2>
%2685 = %1[4]                                   # EncryptedScalar<uint1>
%2686 = multiply(%1128, %2685)                  # EncryptedScalar<float64>
%2687 = astype(%2686, dtype=int_)               # EncryptedScalar<uint1>
%2688 = add(%2684, %2687)                       # EncryptedScalar<uint2>
%2689 = %1[5]                                   # EncryptedScalar<uint1>
%2690 = multiply(%1378, %2689)                  # EncryptedScalar<float64>
%2691 = astype(%2690, dtype=int_)               # EncryptedScalar<uint1>
%2692 = add(%2688, %2691)                       # EncryptedScalar<uint2>
%2693 = %1[6]                                   # EncryptedScalar<uint1>
%2694 = multiply(%1628, %2693)                  # EncryptedScalar<float64>
%2695 = astype(%2694, dtype=int_)               # EncryptedScalar<uint1>
%2696 = add(%2692, %2695)                       # EncryptedScalar<uint2>
%2697 = %1[7]                                   # EncryptedScalar<uint1>
%2698 = multiply(%1878, %2697)                  # EncryptedScalar<float64>
%2699 = astype(%2698, dtype=int_)               # EncryptedScalar<uint1>
%2700 = add(%2696, %2699)                       # EncryptedScalar<uint2>
%2701 = %1[8]                                   # EncryptedScalar<uint1>
%2702 = multiply(%2128, %2701)                  # EncryptedScalar<float64>
%2703 = astype(%2702, dtype=int_)               # EncryptedScalar<uint1>
%2704 = add(%2700, %2703)                       # EncryptedScalar<uint2>
%2705 = %1[9]                                   # EncryptedScalar<uint1>
%2706 = multiply(%2378, %2705)                  # EncryptedScalar<float64>
%2707 = astype(%2706, dtype=int_)               # EncryptedScalar<uint1>
%2708 = add(%2704, %2707)                       # EncryptedScalar<uint2>
%2709 = zeros()                                 # EncryptedScalar<uint1>
%2710 = %1[0]                                   # EncryptedScalar<uint1>
%2711 = multiply(%153, %2710)                   # EncryptedScalar<float64>
%2712 = astype(%2711, dtype=int_)               # EncryptedScalar<uint1>
%2713 = add(%2709, %2712)                       # EncryptedScalar<uint2>
%2714 = %1[1]                                   # EncryptedScalar<uint1>
%2715 = multiply(%403, %2714)                   # EncryptedScalar<float64>
%2716 = astype(%2715, dtype=int_)               # EncryptedScalar<uint1>
%2717 = add(%2713, %2716)                       # EncryptedScalar<uint2>
%2718 = %1[2]                                   # EncryptedScalar<uint1>
%2719 = multiply(%653, %2718)                   # EncryptedScalar<float64>
%2720 = astype(%2719, dtype=int_)               # EncryptedScalar<uint1>
%2721 = add(%2717, %2720)                       # EncryptedScalar<uint2>
%2722 = %1[3]                                   # EncryptedScalar<uint1>
%2723 = multiply(%903, %2722)                   # EncryptedScalar<float64>
%2724 = astype(%2723, dtype=int_)               # EncryptedScalar<uint1>
%2725 = add(%2721, %2724)                       # EncryptedScalar<uint2>
%2726 = %1[4]                                   # EncryptedScalar<uint1>
%2727 = multiply(%1153, %2726)                  # EncryptedScalar<float64>
%2728 = astype(%2727, dtype=int_)               # EncryptedScalar<uint1>
%2729 = add(%2725, %2728)                       # EncryptedScalar<uint2>
%2730 = %1[5]                                   # EncryptedScalar<uint1>
%2731 = multiply(%1403, %2730)                  # EncryptedScalar<float64>
%2732 = astype(%2731, dtype=int_)               # EncryptedScalar<uint1>
%2733 = add(%2729, %2732)                       # EncryptedScalar<uint2>
%2734 = %1[6]                                   # EncryptedScalar<uint1>
%2735 = multiply(%1653, %2734)                  # EncryptedScalar<float64>
%2736 = astype(%2735, dtype=int_)               # EncryptedScalar<uint1>
%2737 = add(%2733, %2736)                       # EncryptedScalar<uint2>
%2738 = %1[7]                                   # EncryptedScalar<uint1>
%2739 = multiply(%1903, %2738)                  # EncryptedScalar<float64>
%2740 = astype(%2739, dtype=int_)               # EncryptedScalar<uint1>
%2741 = add(%2737, %2740)                       # EncryptedScalar<uint2>
%2742 = %1[8]                                   # EncryptedScalar<uint1>
%2743 = multiply(%2153, %2742)                  # EncryptedScalar<float64>
%2744 = astype(%2743, dtype=int_)               # EncryptedScalar<uint1>
%2745 = add(%2741, %2744)                       # EncryptedScalar<uint2>
%2746 = %1[9]                                   # EncryptedScalar<uint1>
%2747 = multiply(%2403, %2746)                  # EncryptedScalar<float64>
%2748 = astype(%2747, dtype=int_)               # EncryptedScalar<uint1>
%2749 = add(%2745, %2748)                       # EncryptedScalar<uint2>
%2750 = zeros()                                 # EncryptedScalar<uint1>
%2751 = %1[0]                                   # EncryptedScalar<uint1>
%2752 = multiply(%178, %2751)                   # EncryptedScalar<float64>
%2753 = astype(%2752, dtype=int_)               # EncryptedScalar<uint1>
%2754 = add(%2750, %2753)                       # EncryptedScalar<uint2>
%2755 = %1[1]                                   # EncryptedScalar<uint1>
%2756 = multiply(%428, %2755)                   # EncryptedScalar<float64>
%2757 = astype(%2756, dtype=int_)               # EncryptedScalar<uint1>
%2758 = add(%2754, %2757)                       # EncryptedScalar<uint2>
%2759 = %1[2]                                   # EncryptedScalar<uint1>
%2760 = multiply(%678, %2759)                   # EncryptedScalar<float64>
%2761 = astype(%2760, dtype=int_)               # EncryptedScalar<uint1>
%2762 = add(%2758, %2761)                       # EncryptedScalar<uint2>
%2763 = %1[3]                                   # EncryptedScalar<uint1>
%2764 = multiply(%928, %2763)                   # EncryptedScalar<float64>
%2765 = astype(%2764, dtype=int_)               # EncryptedScalar<uint1>
%2766 = add(%2762, %2765)                       # EncryptedScalar<uint2>
%2767 = %1[4]                                   # EncryptedScalar<uint1>
%2768 = multiply(%1178, %2767)                  # EncryptedScalar<float64>
%2769 = astype(%2768, dtype=int_)               # EncryptedScalar<uint1>
%2770 = add(%2766, %2769)                       # EncryptedScalar<uint2>
%2771 = %1[5]                                   # EncryptedScalar<uint1>
%2772 = multiply(%1428, %2771)                  # EncryptedScalar<float64>
%2773 = astype(%2772, dtype=int_)               # EncryptedScalar<uint1>
%2774 = add(%2770, %2773)                       # EncryptedScalar<uint2>
%2775 = %1[6]                                   # EncryptedScalar<uint1>
%2776 = multiply(%1678, %2775)                  # EncryptedScalar<float64>
%2777 = astype(%2776, dtype=int_)               # EncryptedScalar<uint1>
%2778 = add(%2774, %2777)                       # EncryptedScalar<uint2>
%2779 = %1[7]                                   # EncryptedScalar<uint1>
%2780 = multiply(%1928, %2779)                  # EncryptedScalar<float64>
%2781 = astype(%2780, dtype=int_)               # EncryptedScalar<uint1>
%2782 = add(%2778, %2781)                       # EncryptedScalar<uint2>
%2783 = %1[8]                                   # EncryptedScalar<uint1>
%2784 = multiply(%2178, %2783)                  # EncryptedScalar<float64>
%2785 = astype(%2784, dtype=int_)               # EncryptedScalar<uint1>
%2786 = add(%2782, %2785)                       # EncryptedScalar<uint2>
%2787 = %1[9]                                   # EncryptedScalar<uint1>
%2788 = multiply(%2428, %2787)                  # EncryptedScalar<float64>
%2789 = astype(%2788, dtype=int_)               # EncryptedScalar<uint1>
%2790 = add(%2786, %2789)                       # EncryptedScalar<uint2>
%2791 = zeros()                                 # EncryptedScalar<uint1>
%2792 = %1[0]                                   # EncryptedScalar<uint1>
%2793 = multiply(%203, %2792)                   # EncryptedScalar<float64>
%2794 = astype(%2793, dtype=int_)               # EncryptedScalar<uint1>
%2795 = add(%2791, %2794)                       # EncryptedScalar<uint2>
%2796 = %1[1]                                   # EncryptedScalar<uint1>
%2797 = multiply(%453, %2796)                   # EncryptedScalar<float64>
%2798 = astype(%2797, dtype=int_)               # EncryptedScalar<uint1>
%2799 = add(%2795, %2798)                       # EncryptedScalar<uint2>
%2800 = %1[2]                                   # EncryptedScalar<uint1>
%2801 = multiply(%703, %2800)                   # EncryptedScalar<float64>
%2802 = astype(%2801, dtype=int_)               # EncryptedScalar<uint1>
%2803 = add(%2799, %2802)                       # EncryptedScalar<uint2>
%2804 = %1[3]                                   # EncryptedScalar<uint1>
%2805 = multiply(%953, %2804)                   # EncryptedScalar<float64>
%2806 = astype(%2805, dtype=int_)               # EncryptedScalar<uint1>
%2807 = add(%2803, %2806)                       # EncryptedScalar<uint2>
%2808 = %1[4]                                   # EncryptedScalar<uint1>
%2809 = multiply(%1203, %2808)                  # EncryptedScalar<float64>
%2810 = astype(%2809, dtype=int_)               # EncryptedScalar<uint1>
%2811 = add(%2807, %2810)                       # EncryptedScalar<uint2>
%2812 = %1[5]                                   # EncryptedScalar<uint1>
%2813 = multiply(%1453, %2812)                  # EncryptedScalar<float64>
%2814 = astype(%2813, dtype=int_)               # EncryptedScalar<uint1>
%2815 = add(%2811, %2814)                       # EncryptedScalar<uint2>
%2816 = %1[6]                                   # EncryptedScalar<uint1>
%2817 = multiply(%1703, %2816)                  # EncryptedScalar<float64>
%2818 = astype(%2817, dtype=int_)               # EncryptedScalar<uint1>
%2819 = add(%2815, %2818)                       # EncryptedScalar<uint2>
%2820 = %1[7]                                   # EncryptedScalar<uint1>
%2821 = multiply(%1953, %2820)                  # EncryptedScalar<float64>
%2822 = astype(%2821, dtype=int_)               # EncryptedScalar<uint1>
%2823 = add(%2819, %2822)                       # EncryptedScalar<uint2>
%2824 = %1[8]                                   # EncryptedScalar<uint1>
%2825 = multiply(%2203, %2824)                  # EncryptedScalar<float64>
%2826 = astype(%2825, dtype=int_)               # EncryptedScalar<uint1>
%2827 = add(%2823, %2826)                       # EncryptedScalar<uint2>
%2828 = %1[9]                                   # EncryptedScalar<uint1>
%2829 = multiply(%2453, %2828)                  # EncryptedScalar<float64>
%2830 = astype(%2829, dtype=int_)               # EncryptedScalar<uint1>
%2831 = add(%2827, %2830)                       # EncryptedScalar<uint2>
%2832 = zeros()                                 # EncryptedScalar<uint1>
%2833 = %1[0]                                   # EncryptedScalar<uint1>
%2834 = multiply(%228, %2833)                   # EncryptedScalar<float64>
%2835 = astype(%2834, dtype=int_)               # EncryptedScalar<uint1>
%2836 = add(%2832, %2835)                       # EncryptedScalar<uint2>
%2837 = %1[1]                                   # EncryptedScalar<uint1>
%2838 = multiply(%478, %2837)                   # EncryptedScalar<float64>
%2839 = astype(%2838, dtype=int_)               # EncryptedScalar<uint1>
%2840 = add(%2836, %2839)                       # EncryptedScalar<uint2>
%2841 = %1[2]                                   # EncryptedScalar<uint1>
%2842 = multiply(%728, %2841)                   # EncryptedScalar<float64>
%2843 = astype(%2842, dtype=int_)               # EncryptedScalar<uint1>
%2844 = add(%2840, %2843)                       # EncryptedScalar<uint2>
%2845 = %1[3]                                   # EncryptedScalar<uint1>
%2846 = multiply(%978, %2845)                   # EncryptedScalar<float64>
%2847 = astype(%2846, dtype=int_)               # EncryptedScalar<uint1>
%2848 = add(%2844, %2847)                       # EncryptedScalar<uint2>
%2849 = %1[4]                                   # EncryptedScalar<uint1>
%2850 = multiply(%1228, %2849)                  # EncryptedScalar<float64>
%2851 = astype(%2850, dtype=int_)               # EncryptedScalar<uint1>
%2852 = add(%2848, %2851)                       # EncryptedScalar<uint2>
%2853 = %1[5]                                   # EncryptedScalar<uint1>
%2854 = multiply(%1478, %2853)                  # EncryptedScalar<float64>
%2855 = astype(%2854, dtype=int_)               # EncryptedScalar<uint1>
%2856 = add(%2852, %2855)                       # EncryptedScalar<uint2>
%2857 = %1[6]                                   # EncryptedScalar<uint1>
%2858 = multiply(%1728, %2857)                  # EncryptedScalar<float64>
%2859 = astype(%2858, dtype=int_)               # EncryptedScalar<uint1>
%2860 = add(%2856, %2859)                       # EncryptedScalar<uint2>
%2861 = %1[7]                                   # EncryptedScalar<uint1>
%2862 = multiply(%1978, %2861)                  # EncryptedScalar<float64>
%2863 = astype(%2862, dtype=int_)               # EncryptedScalar<uint1>
%2864 = add(%2860, %2863)                       # EncryptedScalar<uint2>
%2865 = %1[8]                                   # EncryptedScalar<uint1>
%2866 = multiply(%2228, %2865)                  # EncryptedScalar<float64>
%2867 = astype(%2866, dtype=int_)               # EncryptedScalar<uint1>
%2868 = add(%2864, %2867)                       # EncryptedScalar<uint2>
%2869 = %1[9]                                   # EncryptedScalar<uint1>
%2870 = multiply(%2478, %2869)                  # EncryptedScalar<float64>
%2871 = astype(%2870, dtype=int_)               # EncryptedScalar<uint1>
%2872 = add(%2868, %2871)                       # EncryptedScalar<uint2>
%2873 = zeros()                                 # EncryptedScalar<uint1>
%2874 = %1[0]                                   # EncryptedScalar<uint1>
%2875 = multiply(%253, %2874)                   # EncryptedScalar<float64>
%2876 = astype(%2875, dtype=int_)               # EncryptedScalar<uint1>
%2877 = add(%2873, %2876)                       # EncryptedScalar<uint2>
%2878 = %1[1]                                   # EncryptedScalar<uint1>
%2879 = multiply(%503, %2878)                   # EncryptedScalar<float64>
%2880 = astype(%2879, dtype=int_)               # EncryptedScalar<uint1>
%2881 = add(%2877, %2880)                       # EncryptedScalar<uint2>
%2882 = %1[2]                                   # EncryptedScalar<uint1>
%2883 = multiply(%753, %2882)                   # EncryptedScalar<float64>
%2884 = astype(%2883, dtype=int_)               # EncryptedScalar<uint1>
%2885 = add(%2881, %2884)                       # EncryptedScalar<uint2>
%2886 = %1[3]                                   # EncryptedScalar<uint1>
%2887 = multiply(%1003, %2886)                  # EncryptedScalar<float64>
%2888 = astype(%2887, dtype=int_)               # EncryptedScalar<uint1>
%2889 = add(%2885, %2888)                       # EncryptedScalar<uint2>
%2890 = %1[4]                                   # EncryptedScalar<uint1>
%2891 = multiply(%1253, %2890)                  # EncryptedScalar<float64>
%2892 = astype(%2891, dtype=int_)               # EncryptedScalar<uint1>
%2893 = add(%2889, %2892)                       # EncryptedScalar<uint2>
%2894 = %1[5]                                   # EncryptedScalar<uint1>
%2895 = multiply(%1503, %2894)                  # EncryptedScalar<float64>
%2896 = astype(%2895, dtype=int_)               # EncryptedScalar<uint1>
%2897 = add(%2893, %2896)                       # EncryptedScalar<uint2>
%2898 = %1[6]                                   # EncryptedScalar<uint1>
%2899 = multiply(%1753, %2898)                  # EncryptedScalar<float64>
%2900 = astype(%2899, dtype=int_)               # EncryptedScalar<uint1>
%2901 = add(%2897, %2900)                       # EncryptedScalar<uint2>
%2902 = %1[7]                                   # EncryptedScalar<uint1>
%2903 = multiply(%2003, %2902)                  # EncryptedScalar<float64>
%2904 = astype(%2903, dtype=int_)               # EncryptedScalar<uint1>
%2905 = add(%2901, %2904)                       # EncryptedScalar<uint2>
%2906 = %1[8]                                   # EncryptedScalar<uint1>
%2907 = multiply(%2253, %2906)                  # EncryptedScalar<float64>
%2908 = astype(%2907, dtype=int_)               # EncryptedScalar<uint1>
%2909 = add(%2905, %2908)                       # EncryptedScalar<uint2>
%2910 = %1[9]                                   # EncryptedScalar<uint1>
%2911 = multiply(%2503, %2910)                  # EncryptedScalar<float64>
%2912 = astype(%2911, dtype=int_)               # EncryptedScalar<uint1>
%2913 = add(%2909, %2912)                       # EncryptedScalar<uint2>
%2914 = array([%2544, %2 ... 72, %2913])        # EncryptedTensor<uint2, shape=(10,)>
return %2914
